{"version":3,"file":"js/3693.dbbcd3ae.js","mappings":"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","sources":["webpack://client/./src/components/BIOMD/BIOMD/BIOMD-UI/UI-Input.vue","webpack://client/./src/components/BIOMD/BIOMD/BIOMD-UI/UI-Section.vue","webpack://client/./src/components/BIOMD/BIOMD/BIOMD-VENDOR/VENDOR-VendorInformation.vue","webpack://client/./src/components/BIOMD/BIOMD/BIOMD-VENDOR/VENDOR-VendorInformation.vue?9ae9"],"sourcesContent":["import script from \"./UI-Input.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./UI-Input.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","import script from \"./UI-Section.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./UI-Section.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./UI-Section.vue?vue&type=style&index=0&id=9468e16e&lang=scss&scoped=true\"\n\nimport exportComponent from \"/mnt/d/Dev/MEMS/src/client/web/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-9468e16e\"]])\n\nexport default __exports__","<template>\r\n  <main>\r\n    <!-- The main form -->\r\n    <Section sectionTitle=\"Vendor Information\">\r\n      <div class=\"row row-cols-1 row-cols-sm-1 row-cols-md-2 row-cols-lg-2 g-3\">\r\n        <!-- Vendor Name -->\r\n        <div class=\"col\">\r\n          <label for=\"vendorName\" class=\"form-label\">Vendor Name</label>\r\n          <div class=\"input-group mb-3\">\r\n            <input\r\n              type=\"text\"\r\n              class=\"form-control\"\r\n              id=\"vendorName\"\r\n              aria-describedby=\"basic-addon3\"\r\n              placeholder=\"Enter Vendor Name\"\r\n              v-model=\"vendorInfo.vendorName\"\r\n            />\r\n          </div>\r\n        </div>\r\n        <!-- Country -->\r\n        <div class=\"col\">\r\n          <label for=\"countryList\" class=\"form-label\">Country</label>\r\n          <input\r\n            class=\"form-control\"\r\n            list=\"countryOptions\"\r\n            id=\"countryList\"\r\n            placeholder=\"Type to search...\"\r\n            v-model=\"vendorInfo.selectedCountry.Loci_Name_Country\"\r\n            @input=\"fetchCountry\"\r\n            autocomplete=\"off\"\r\n          />\r\n          <datalist id=\"countryOptions\">\r\n            <option\r\n              v-for=\"country in countryList\"\r\n              :key=\"country.index\"\r\n              :value=\"country.Loci_Name_Country\"\r\n            ></option>\r\n          </datalist>\r\n        </div>\r\n        <!-- Province/State/Region -->\r\n\r\n        <div class=\"col\">\r\n          <label for=\"stateList\" class=\"form-label\"\r\n            >Province/State/Region</label\r\n          >\r\n          <input\r\n            class=\"form-control\"\r\n            list=\"stateOptions\"\r\n            id=\"stateList\"\r\n            placeholder=\"Type to search...\"\r\n            v-model=\"vendorInfo.selectedState.Loci_Name_State\"\r\n            @input=\"fetchState\"\r\n            autocomplete=\"off\"\r\n          />\r\n          <datalist id=\"stateOptions\">\r\n            <option\r\n              v-for=\"state in stateList\"\r\n              :key=\"state.index\"\r\n              :value=\"state.Loci_Name_State\"\r\n            ></option>\r\n          </datalist>\r\n        </div>\r\n        <!-- City/District -->\r\n        <div class=\"col\">\r\n          <label for=\"districtList\" class=\"form-label\">District</label>\r\n          <input\r\n            class=\"form-control\"\r\n            list=\"districtOptions\"\r\n            id=\"districtList\"\r\n            placeholder=\"Type to search...\"\r\n            v-model=\"vendorInfo.selectedDistrict.Loci_Name_Area_L1\"\r\n            @input=\"fetchDistrict\"\r\n            autocomplete=\"off\"\r\n          />\r\n          <datalist id=\"districtOptions\">\r\n            <option\r\n              v-for=\"district in districtList\"\r\n              :key=\"district.index\"\r\n              :value=\"district.Loci_Name_Area_L1\"\r\n            ></option>\r\n          </datalist>\r\n        </div>\r\n      </div>\r\n      <div class=\"row g-3 mt-3\">\r\n        <!-- Street Address 1 -->\r\n        <div class=\"col-12\">\r\n          <Input\r\n            label=\"Street Address 1\"\r\n            type=\"text\"\r\n            id=\"street1\"\r\n            placeholder=\"Enter Street Address 1\"\r\n            v-model=\"vendorInfo.streetAddress1\"\r\n          />\r\n        </div>\r\n        <!-- Street Address 2 -->\r\n        <div class=\"col-12\">\r\n          <Input\r\n            label=\"Street Address 2\"\r\n            type=\"text\"\r\n            id=\"street2\"\r\n            placeholder=\"Enter Street Address 2\"\r\n            v-model=\"vendorInfo.streetAddress2\"\r\n          />\r\n        </div>\r\n        <!-- Zip / Postal Code -->\r\n        <div class=\"col-lg-6\">\r\n          <Input\r\n            label=\"Zip/Postal Code\"\r\n            type=\"number\"\r\n            id=\"zip\"\r\n            placeholder=\"Enter Zip/Postal Code\"\r\n            v-model=\"vendorInfo.zipCode\"\r\n          />\r\n        </div>\r\n        <!-- Site ID -->\r\n        <div class=\"col-6\">\r\n          <Input\r\n            label=\"Site Id\"\r\n            type=\"text\"\r\n            id=\"siteId\"\r\n            placeholder=\"Enter Site ID\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </Section>\r\n  </main>\r\n</template>\r\n\r\n<script setup>\r\nimport { inject, ref, onMounted } from \"vue\";\r\nimport { useStore } from \"vuex\";\r\nimport Input from \"../BIOMD-UI/UI-Input.vue\";\r\nimport Section from \"../BIOMD-UI/UI-Section.vue\";\r\nconst store = useStore();\r\nconst vendorInfo = inject(\"vendorInfo\");\r\nconst Global_Vendor_Definition = inject(\"Global_Vendor_Definition\");\r\nconst countryList = ref(null);\r\nconst stateList = ref(null);\r\nconst districtList = ref(null);\r\nconst sendSocketReq = (request) => {\r\n  store.dispatch(\"sendSocketReq\", request);\r\n};\r\n\r\nconst fetchCountry = async (event) => {\r\n  try {\r\n    const selectedCountry = event ? event.target.value : \"\";\r\n    if (\r\n      event &&\r\n      (!(event instanceof InputEvent) ||\r\n        event.inputType === \"insertReplacementText\")\r\n    ) {\r\n      // determine if the value is in the datalist. If so, someone selected a value in the list!\r\n      vendorInfo.value.selectedCountry = countryList.value.find((country) => {\r\n        return selectedCountry === country.Loci_Name_Country;\r\n      });\r\n      Global_Vendor_Definition.value.vendorAddress.Country =\r\n        vendorInfo.value.selectedCountry.Loci_Code_Country;\r\n      // validateInput(\"Country\");\r\n      await fetchState();\r\n    } else {\r\n      // Clear Country, State, District, Mandal, Postal Code\r\n      Global_Vendor_Definition.value.vendorAddress.Country = null;\r\n      Global_Vendor_Definition.value.vendorAddress.State = null;\r\n      vendorInfo.value.selectedState = {\r\n        Loci_Name_Country: null,\r\n        Loci_Code_Country: null,\r\n      };\r\n      Global_Vendor_Definition.value.vendorAddress.District = null;\r\n      vendorInfo.value.selectedDistrict = {\r\n        Loci_Name_Area_L1: null,\r\n        Loci_Code_Area_L1: null,\r\n      };\r\n      sendSocketReq({\r\n        data: {\r\n          Expiry: 20000,\r\n          Type: \"REQUEST\",\r\n          Request: {\r\n            Module: \"GLOBAL\",\r\n            ServiceCode: \"GLOBL\",\r\n            API: \"GET_GEO_LIST\",\r\n            Max_List: 500,\r\n            Criteria: {\r\n              Type_Code: \"CNTY\",\r\n              Loci_Name_Country: \"\",\r\n            },\r\n          },\r\n        },\r\n        callback: (res) => {\r\n          if (res.Type === \"RESPONSE\") {\r\n            console.log(\"Response Packet -->\", res.Response);\r\n            countryList.value = res.Response.Country_List; //Assigning response values to getValues Object\r\n          } else if (res.Type === \"ERROR\") {\r\n            // Error response received during fetching\r\n            Type: \"ERROR\";\r\n            Response: {\r\n              Error_Code: \"API-GET_GEO_LIST-E001\";\r\n              Error_Msg: \"GET_GEO_LIST_API: Failed to execute query\";\r\n            }\r\n          }\r\n        },\r\n      });\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nconst fetchState = async (event) => {\r\n  try {\r\n    const selectedState = event ? event.target.value : \"\";\r\n    if (\r\n      event &&\r\n      (!(event instanceof InputEvent) ||\r\n        event.inputType === \"insertReplacementText\")\r\n    ) {\r\n      // determine if the value is in the datalist. If so, someone selected a value in the list!\r\n      vendorInfo.value.selectedState = stateList.value.find((state) => {\r\n        return selectedState === state.Loci_Name_State;\r\n      });\r\n      Global_Vendor_Definition.value.vendorAddress.State =\r\n        vendorInfo.value.selectedState.Loci_Code_State;\r\n      // validateInput(\"Country\");\r\n      await fetchDistrict();\r\n    } else {\r\n      // Clear Country, State, District, Mandal, Postal Code\r\n      Global_Vendor_Definition.value.vendorAddress.State = null;\r\n      Global_Vendor_Definition.value.vendorAddress.District = null;\r\n      vendorInfo.value.selectedDistrict = {\r\n        Loci_Name_Area_L1: null,\r\n        Loci_Code_Area_L1: null,\r\n      };\r\n      sendSocketReq({\r\n        data: {\r\n          Expiry: 20000,\r\n          Type: \"REQUEST\",\r\n          Request: {\r\n            Module: \"GLOBAL\",\r\n            ServiceCode: \"GLOBL\",\r\n            API: \"GET_GEO_LIST\",\r\n            Max_List: 500,\r\n            Criteria: {\r\n              Type_Code: \"STATE\",\r\n              Loci_Code_Country:\r\n                Global_Vendor_Definition.value.vendorAddress.Country,\r\n              Loci_Name_State: \"\",\r\n            },\r\n          },\r\n        },\r\n        callback: (res) => {\r\n          if (res.Type === \"RESPONSE\") {\r\n            console.log(\"Response Packet -->\", res.Response);\r\n            stateList.value = res.Response.State_List; //Assigning response values to getValues Object\r\n          } else if (res.Type === \"ERROR\") {\r\n            // Error response received during fetching\r\n            Type: \"ERROR\";\r\n            Response: {\r\n              Error_Code: \"API-GET_GEO_LIST-E001\";\r\n              Error_Msg: \"GET_GEO_LIST_API: Failed to execute query\";\r\n            }\r\n          }\r\n        },\r\n      });\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nconst fetchDistrict = async (event) => {\r\n  try {\r\n    const selectedDistrict = event ? event.target.value : \"\";\r\n    if (\r\n      event &&\r\n      (!(event instanceof InputEvent) ||\r\n        event.inputType === \"insertReplacementText\")\r\n    ) {\r\n      // determine if the value is in the datalist. If so, someone selected a value in the list!\r\n      vendorInfo.value.selectedDistrict = districtList.value.find((state) => {\r\n        return selectedDistrict === state.Loci_Name_Area_L1;\r\n      });\r\n      Global_Vendor_Definition.value.vendorAddress.District =\r\n        vendorInfo.value.selectedDistrict.Loci_Code_Area_L1;\r\n      // validateInput(\"Country\");\r\n      // await fetchState();\r\n    } else {\r\n      // Clear Country, State, District, Mandal, Postal Code\r\n      Global_Vendor_Definition.value.vendorAddress.District = null;\r\n      sendSocketReq({\r\n        data: {\r\n          Expiry: 20000,\r\n          Type: \"REQUEST\",\r\n          Request: {\r\n            Module: \"GLOBAL\",\r\n            ServiceCode: \"GLOBL\",\r\n            API: \"GET_GEO_LIST\",\r\n            Max_List: 500,\r\n            Criteria: {\r\n              Type_Code: \"ARL1\",\r\n              Loci_Code_Country:\r\n                Global_Vendor_Definition.value.vendorAddress.Country,\r\n              Loci_Code_State:\r\n                Global_Vendor_Definition.value.vendorAddress.State,\r\n              Loci_Name_District: \"\",\r\n            },\r\n          },\r\n        },\r\n        callback: (res) => {\r\n          if (res.Type === \"RESPONSE\") {\r\n            console.log(\"Response Packet -->\", res.Response);\r\n            districtList.value = res.Response.ARL1_List; //Assigning response values to getValues Object\r\n          } else if (res.Type === \"ERROR\") {\r\n            // Error response received during fetching\r\n            Type: \"ERROR\";\r\n            Response: {\r\n              Error_Code: \"API-GET_GEO_LIST-E001\";\r\n              Error_Msg: \"GET_GEO_LIST_API: Failed to execute query\";\r\n            }\r\n          }\r\n        },\r\n      });\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nonMounted(() => {\r\n  fetchCountry();\r\n});\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n@import \"../Style/BIOMD.scss\";\r\n</style>\r\n","import script from \"./VENDOR-VendorInformation.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./VENDOR-VendorInformation.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./VENDOR-VendorInformation.vue?vue&type=style&index=0&id=45a9896e&lang=scss&scoped=true\"\n\nimport exportComponent from \"/mnt/d/Dev/MEMS/src/client/web/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-45a9896e\"]])\n\nexport default __exports__"],"names":["__exports__","store","useStore","vendorInfo","inject","Global_Vendor_Definition","countryList","ref","stateList","districtList","sendSocketReq","request","dispatch","fetchCountry","async","selectedCountry","event","target","value","InputEvent","inputType","vendorAddress","Country","State","selectedState","Loci_Name_Country","Loci_Code_Country","District","selectedDistrict","Loci_Name_Area_L1","Loci_Code_Area_L1","data","Expiry","Type","Request","Module","ServiceCode","API","Max_List","Criteria","Type_Code","callback","res","console","log","Response","Country_List","find","country","fetchState","error","Loci_Name_State","State_List","state","Loci_Code_State","fetchDistrict","Loci_Name_District","ARL1_List","onMounted"],"sourceRoot":""}