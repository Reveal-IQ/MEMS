{"version":3,"file":"js/765.13776ab7.js","mappings":"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","sources":["webpack://mems-client/./src/components/BIOMD/BIOMD/BIOMD-MANUFACTURER/MANUFACTURER.vue","webpack://mems-client/./src/components/BIOMD/BIOMD/BIOMD-MANUFACTURER/MANUFACTURER-ManufacturerInformation.vue","webpack://mems-client/./src/components/BIOMD/BIOMD/BIOMD-MANUFACTURER/MANUFACTURER-ManufacturerInformation.vue?76a9","webpack://mems-client/./src/components/BIOMD/BIOMD/BIOMD-MANUFACTURER/MANUFACTURER.vue?c3d4","webpack://mems-client/./src/components/BIOMD/BIOMD/BIOMD-UI/UI-Btn.vue","webpack://mems-client/./src/components/BIOMD/BIOMD/BIOMD-UI/UI-Btn.vue?d9b9","webpack://mems-client/./src/components/BIOMD/BIOMD/BIOMD-UI/UI-FormHeader.vue"],"sourcesContent":["<!-- \r\n************************************\r\nCreated By : Reveal Foundation  \r\nAuthor     : Edward Opoku-Agyemang           \r\nDate       : 03-Sep-2022\r\nVersion    : 0.0.2   \r\nDescription: Describe the application\r\n************************************\r\n-->\r\n\r\n<template>\r\n  <div class=\"RevealContainer\">\r\n    <div class=\"container p-4 m-4\">\r\n      <!-- Welcome Variable Rendering with Mustatsh syntax. Variable is databinded -->\r\n      <div\r\n        class=\"d-lg-flex d-md-flex d-sm-flex gap-lg-0 gap-sm-5 align-items-center justify-content-lg-between justify-content-md-between justify-content-sm-center\"\r\n      >\r\n        <div class=\"mt-3\">\r\n          <Header\r\n            title=\"New Manufacturer\"\r\n            subTitle=\"Create new manufacturer with this form\"\r\n          />\r\n        </div>\r\n        <div class=\"d-flex gap-2 d-md-block\">\r\n          <Btn2\r\n            BtnName=\"Return\"\r\n            :icon=\"'arrow-left'\"\r\n            backgroundColor=\"none\"\r\n            @click=\"goBack\"\r\n            class=\"text-secondary btn-sm\"\r\n          />\r\n\r\n          <Btn2\r\n            BtnName=\"Dashboard\"\r\n            backgroundColor=\"#2A94B6\"\r\n            @click=\"goBack\"\r\n            class=\"text-light btn-sm\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <main>\r\n        <ManufacturerInformation />\r\n\r\n        <div class=\"d-flex justify-content-center py-3\">\r\n          <!-- btn-green and a-link are custom css for MEMS check base.css -->\r\n          <div class=\"\">\r\n            <Btn\r\n              BtnName=\"Create Manufacturer\"\r\n              backgroundColor=\"#27AE60\"\r\n              class=\"mb-3\"\r\n              @click=\"createRecord()\"\r\n            />\r\n\r\n            <Btn BtnName=\"Clear Content\" />\r\n          </div>\r\n        </div>\r\n      </main>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { useStore } from \"vuex\";\r\nimport { ref, toRefs, provide, computed } from \"vue\";\r\n\r\nimport ManufacturerInformation from \"./MANUFACTURER-ManufacturerInformation.vue\";\r\nimport Btn from \"../BIOMD-UI/UI-Btn.vue\";\r\nimport Btn2 from \"../BIOMD-UI/UI-Btn2.vue\";\r\nimport Header from \"../BIOMD-UI/UI-FormHeader.vue\";\r\nimport { ManufacturerRecord } from \"../../../../store/modules/recordSchema\";\r\n\r\nexport default {\r\n  name: \"manufacturer\",\r\n  // Define Props here\r\n  props: {\r\n    tabid: {\r\n      type: String,\r\n    },\r\n  },\r\n  // Emit value can pass within this array\r\n  emits: [\"updatePage\"],\r\n  setup(props, { emit }) {\r\n    const { props_variable } = toRefs(props); // include variables from the props with help of toRefs\r\n    const store = useStore();\r\n    const Institute_Code = computed(\r\n      () => store.state.globalStore.UserInfo.Institute_Info.Code\r\n    );\r\n\r\n    const manufacturerInfo = ref({\r\n      manufacturerName: null\r\n    });\r\n\r\n    const Global_Manufacturer_Definition = ref({\r\n      manufacturerAddress: {\r\n        Country: null,\r\n        State: null,\r\n        District: null,\r\n      },\r\n    });\r\n\r\n    const changeServiceState = (serviceState) =>\r\n      store.dispatch(\"changeServiceState\", serviceState);\r\n    //Redirect to another page\r\n    function redirectToPage() {\r\n      changeServiceState({\r\n        service: \"<App_Name>\",\r\n        tabcode: tabid.value,\r\n        status: \"<Navigate_To_This_Page>\",\r\n      });\r\n    }\r\n\r\n    const changePage = (page) => {\r\n      emit(\"updatePage\", page);\r\n    };\r\n    // send Socket Request use to send rrequest packet for an API\r\n    const sendSocketReq = (request) => {\r\n      store.dispatch(\"sendSocketReq\", request);\r\n    };\r\n\r\n    // Function to Send Request and Get Response by this template code .\r\n    function createRecord() {\r\n      // send Request as below .\r\n      sendSocketReq({\r\n        data: {\r\n          Expiry: 20000,\r\n          Type: \"REQUEST\",\r\n          Request: {\r\n            Module: \"MEMS\",\r\n            ServiceCode: \"BIOMD\",\r\n            API: \"CREATE_RECORD\",\r\n            collection: \"Manufacturer\",\r\n            record: new ManufacturerRecord({\r\n              manufacturerName: manufacturerInfo.value.manufacturerName\r\n            }).serialize(),\r\n            Institute_Code: Institute_Code.value, //Dynamically changes when another institute logged in\r\n          },\r\n        },\r\n        callback: (res) => {\r\n          if (res.Type === \"RESPONSE\") {\r\n            changePage(\"success\");\r\n\r\n            console.log(\"Response Packet -->\", res.Response);\r\n            getValues.value = res.Response.Site_Info[0]; //Assigning response values to getValues Object\r\n          } else if (res.Type === \"ERROR\") {\r\n            // Error response received during fetching\r\n            Type: \"ERROR\";\r\n            Response: {\r\n              Error_Code: \"API-CREATE_RECORD-E001\";\r\n              Error_Msg: \"CREATE_RECORD_API: Failed to execute query\";\r\n            }\r\n          }\r\n        },\r\n      });\r\n    }\r\n\r\n    const goBack = () => {\r\n      emit(\"updatePage\", \"dashboard\");\r\n    };\r\n\r\n    provide(\"manufacturerInfo\", manufacturerInfo);\r\n    provide(\"Global_Manufacturer_Definition\", Global_Manufacturer_Definition);\r\n\r\n    return {\r\n      goBack,\r\n      redirectToPage,\r\n      createRecord,\r\n      changePage,\r\n    };\r\n  },\r\n  components: { ManufacturerInformation, Btn2, Btn, Header },\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.RevealContainer {\r\n  min-height: 100vh;\r\n  max-height: 100vh;\r\n  overflow: scroll;\r\n}\r\n\r\n.RevealContainer::-webkit-scrollbar {\r\n  display: none;\r\n}\r\n</style>\r\n","<template>\r\n  <main>\r\n    <!-- The main form -->\r\n    <Section sectionTitle=\"Manufacturer Information\">\r\n      <div class=\"row row-cols-1 row-cols-sm-1 row-cols-md-2 row-cols-lg-2 g-3\">\r\n        <!-- Manufacturer Name -->\r\n        <div class=\"col\">\r\n          <Input\r\n            label=\"Manufacturer Name\"\r\n            type=\"text\"\r\n            v-model=\"manufacturerInfo.manufacturerName\"\r\n            id=\"manufacturerName\"\r\n            placeholder=\"Enter Manufacturer Name\"\r\n          />\r\n        </div>\r\n        <!-- Country -->\r\n        <!-- <div class=\"col\">\r\n          <label for=\"countryList\" class=\"form-label\">Country</label>\r\n          <input\r\n            class=\"form-control\"\r\n            list=\"countryOptions\"\r\n            id=\"countryList\"\r\n            placeholder=\"Type to search...\"\r\n            v-model=\"manufacturerInfo.selectedCountry.Loci_Name_Country\"\r\n            @input=\"fetchCountry\"\r\n            autocomplete=\"off\"\r\n          />\r\n          <datalist id=\"countryOptions\">\r\n            <option\r\n              v-for=\"country in countryList\"\r\n              :key=\"country.index\"\r\n              :value=\"country.Loci_Name_Country\"\r\n            ></option>\r\n          </datalist>\r\n        </div> -->\r\n\r\n        <!-- Province/State/Region -->\r\n        <!-- <div class=\"col\">\r\n          <label for=\"stateList\" class=\"form-label\"\r\n            >Province/State/Region</label\r\n          >\r\n          <input\r\n            class=\"form-control\"\r\n            list=\"stateOptions\"\r\n            id=\"stateList\"\r\n            placeholder=\"Type to search...\"\r\n            v-model=\"manufacturerInfo.selectedState.Loci_Name_State\"\r\n            @input=\"fetchState\"\r\n            autocomplete=\"off\"\r\n          />\r\n          <datalist id=\"stateOptions\">\r\n            <option\r\n              v-for=\"state in stateList\"\r\n              :key=\"state.index\"\r\n              :value=\"state.Loci_Name_State\"\r\n            ></option>\r\n          </datalist>\r\n        </div> -->\r\n\r\n        <!-- City/District -->\r\n        <!-- <div class=\"col\">\r\n          <label for=\"districtList\" class=\"form-label\">District</label>\r\n          <input\r\n            class=\"form-control\"\r\n            list=\"districtOptions\"\r\n            id=\"districtList\"\r\n            placeholder=\"Type to search...\"\r\n            v-model=\"manufacturerInfo.selectedDistrict.Loci_Name_Area_L1\"\r\n            @input=\"fetchDistrict\"\r\n            autocomplete=\"off\"\r\n          />\r\n          <datalist id=\"districtOptions\">\r\n            <option\r\n              v-for=\"district in districtList\"\r\n              :key=\"district.index\"\r\n              :value=\"district.Loci_Name_Area_L1\"\r\n            ></option>\r\n          </datalist>\r\n        </div> -->\r\n      </div>\r\n      <div class=\"row g-3 mt-3\">\r\n        <!-- Street Address 1 -->\r\n        <!-- <div class=\"col-12\">\r\n          <Input\r\n            label=\"Street Address 1\"\r\n            type=\"text\"\r\n            v-model=\"manufacturerInfo.streetAddress1\"\r\n            id=\"street1\"\r\n            placeholder=\"Enter Street Address 1\"\r\n          />\r\n        </div> -->\r\n        <!-- Street Address 2 -->\r\n        <!-- <div class=\"col-12\">\r\n          <Input\r\n            label=\"Street Address 2\"\r\n            type=\"text\"\r\n            v-model=\"manufacturerInfo.streetAddress2\"\r\n            id=\"street2\"\r\n            placeholder=\"Enter Street Address 2\"\r\n          />\r\n        </div> -->\r\n        <!-- Zip / Postal Code -->\r\n        <!-- <div class=\"col-lg-3\">\r\n          <Input\r\n            label=\"Zip/Postal Code\"\r\n            type=\"number\"\r\n            v-model=\"manufacturerInfo.zipCode\"\r\n            id=\"zip\"\r\n            placeholder=\"Enter Zip/Postal Code\"\r\n          />\r\n        </div> -->\r\n      </div>\r\n    </Section>\r\n  </main>\r\n</template>\r\n\r\n<script setup>\r\nimport { inject, ref, onMounted, computed } from \"vue\";\r\nimport { useStore } from \"vuex\";\r\nimport Input from \"../BIOMD-UI/UI-Input.vue\";\r\nimport Section from \"../BIOMD-UI/UI-Section.vue\";\r\nconst store = useStore();\r\nconst manufacturerInfo = inject(\"manufacturerInfo\");\r\nconst Global_Manufacturer_Definition = inject(\"Global_Manufacturer_Definition\");\r\nconst countryList = ref(null);\r\nconst stateList = ref(null);\r\nconst districtList = ref(null);\r\nconst sendSocketReq = (request) => {\r\n  store.dispatch(\"sendSocketReq\", request);\r\n};\r\n\r\n// const fetchCountry = async (event) => {\r\n//   try {\r\n//     const selectedCountry = event ? event.target.value : \"\";\r\n//     if (\r\n//       event &&\r\n//       (!(event instanceof InputEvent) ||\r\n//         event.inputType === \"insertReplacementText\")\r\n//     ) {\r\n//       // determine if the value is in the datalist. If so, someone selected a value in the list!\r\n//       manufacturerInfo.value.selectedCountry = countryList.value.find(\r\n//         (country) => {\r\n//           return selectedCountry === country.Loci_Name_Country;\r\n//         }\r\n//       );\r\n//       Global_Manufacturer_Definition.value.manufacturerAddress.Country =\r\n//         manufacturerInfo.value.selectedCountry.Loci_Code_Country;\r\n//       // validateInput(\"Country\");\r\n//       await fetchState();\r\n//     } else {\r\n//       // Clear Country, State, District, Mandal, Postal Code\r\n//       Global_Manufacturer_Definition.value.manufacturerAddress.Country = null;\r\n//       Global_Manufacturer_Definition.value.manufacturerAddress.State = null;\r\n//       manufacturerInfo.value.selectedState = {\r\n//         Loci_Name_Country: null,\r\n//         Loci_Code_Country: null,\r\n//       };\r\n//       Global_Manufacturer_Definition.value.manufacturerAddress.District = null;\r\n//       manufacturerInfo.value.selectedDistrict = {\r\n//         Loci_Name_Area_L1: null,\r\n//         Loci_Code_Area_L1: null,\r\n//       };\r\n//       sendSocketReq({\r\n//         data: {\r\n//           Expiry: 20000,\r\n//           Type: \"REQUEST\",\r\n//           Request: {\r\n//             Module: \"GLOBAL\",\r\n//             ServiceCode: \"GLOBL\",\r\n//             API: \"GET_GEO_LIST\",\r\n//             Max_List: 500,\r\n//             Criteria: {\r\n//               Type_Code: \"CNTY\",\r\n//               Loci_Name_Country: \"\",\r\n//             },\r\n//           },\r\n//         },\r\n//         callback: (res) => {\r\n//           if (res.Type === \"RESPONSE\") {\r\n//             console.log(\"Response Packet -->\", res.Response);\r\n//             countryList.value = res.Response.Country_List; //Assigning response values to getValues Object\r\n//           } else if (res.Type === \"ERROR\") {\r\n//             // Error response received during fetching\r\n//             Type: \"ERROR\";\r\n//             Response: {\r\n//               Error_Code: \"API-GET_GEO_LIST-E001\";\r\n//               Error_Msg: \"GET_GEO_LIST_API: Failed to execute query\";\r\n//             }\r\n//           }\r\n//         },\r\n//       });\r\n//     }\r\n//   } catch (error) {\r\n//     console.log(error);\r\n//   }\r\n// };\r\n// const fetchState = async (event) => {\r\n//   try {\r\n//     const selectedState = event ? event.target.value : \"\";\r\n//     if (\r\n//       event &&\r\n//       (!(event instanceof InputEvent) ||\r\n//         event.inputType === \"insertReplacementText\")\r\n//     ) {\r\n//       // determine if the value is in the datalist. If so, someone selected a value in the list!\r\n//       manufacturerInfo.value.selectedState = stateList.value.find((state) => {\r\n//         return selectedState === state.Loci_Name_State;\r\n//       });\r\n//       Global_Manufacturer_Definition.value.manufacturerAddress.State =\r\n//         manufacturerInfo.value.selectedState.Loci_Code_State;\r\n//       // validateInput(\"Country\");\r\n//       await fetchDistrict();\r\n//     } else {\r\n//       // Clear Country, State, District, Mandal, Postal Code\r\n//       Global_Manufacturer_Definition.value.manufacturerAddress.State = null;\r\n//       Global_Manufacturer_Definition.value.manufacturerAddress.District = null;\r\n//       manufacturerInfo.value.selectedDistrict = {\r\n//         Loci_Name_Area_L1: null,\r\n//         Loci_Code_Area_L1: null,\r\n//       };\r\n//       sendSocketReq({\r\n//         data: {\r\n//           Expiry: 20000,\r\n//           Type: \"REQUEST\",\r\n//           Request: {\r\n//             Module: \"GLOBAL\",\r\n//             ServiceCode: \"GLOBL\",\r\n//             API: \"GET_GEO_LIST\",\r\n//             Max_List: 500,\r\n//             Criteria: {\r\n//               Type_Code: \"STATE\",\r\n//               Loci_Code_Country:\r\n//                 Global_Manufacturer_Definition.value.manufacturerAddress\r\n//                   .Country,\r\n//               Loci_Name_State: \"\",\r\n//             },\r\n//           },\r\n//         },\r\n//         callback: (res) => {\r\n//           if (res.Type === \"RESPONSE\") {\r\n//             console.log(\"Response Packet -->\", res.Response);\r\n//             stateList.value = res.Response.State_List; //Assigning response values to getValues Object\r\n//           } else if (res.Type === \"ERROR\") {\r\n//             // Error response received during fetching\r\n//             Type: \"ERROR\";\r\n//             Response: {\r\n//               Error_Code: \"API-GET_GEO_LIST-E001\";\r\n//               Error_Msg: \"GET_GEO_LIST_API: Failed to execute query\";\r\n//             }\r\n//           }\r\n//         },\r\n//       });\r\n//     }\r\n//   } catch (error) {\r\n//     console.log(error);\r\n//   }\r\n// };\r\n\r\n// const fetchDistrict = async (event) => {\r\n//   try {\r\n//     const selectedDistrict = event ? event.target.value : \"\";\r\n//     if (\r\n//       event &&\r\n//       (!(event instanceof InputEvent) ||\r\n//         event.inputType === \"insertReplacementText\")\r\n//     ) {\r\n//       // determine if the value is in the datalist. If so, someone selected a value in the list!\r\n//       manufacturerInfo.value.selectedDistrict = districtList.value.find(\r\n//         (state) => {\r\n//           return selectedDistrict === state.Loci_Name_Area_L1;\r\n//         }\r\n//       );\r\n//       Global_Manufacturer_Definition.value.manufacturerAddress.District =\r\n//         manufacturerInfo.value.selectedDistrict.Loci_Code_Area_L1;\r\n//       // validateInput(\"Country\");\r\n//       // await fetchState();\r\n//     } else {\r\n//       // Clear Country, State, District, Mandal, Postal Code\r\n//       Global_Manufacturer_Definition.value.manufacturerAddress.District = null;\r\n//       sendSocketReq({\r\n//         data: {\r\n//           Expiry: 20000,\r\n//           Type: \"REQUEST\",\r\n//           Request: {\r\n//             Module: \"GLOBAL\",\r\n//             ServiceCode: \"GLOBL\",\r\n//             API: \"GET_GEO_LIST\",\r\n//             Max_List: 500,\r\n//             Criteria: {\r\n//               Type_Code: \"ARL1\",\r\n//               Loci_Code_Country:\r\n//                 Global_Manufacturer_Definition.value.manufacturerAddress\r\n//                   .Country,\r\n//               Loci_Code_State:\r\n//                 Global_Manufacturer_Definition.value.manufacturerAddress.State,\r\n//               Loci_Name_District: \"\",\r\n//             },\r\n//           },\r\n//         },\r\n//         callback: (res) => {\r\n//           if (res.Type === \"RESPONSE\") {\r\n//             console.log(\"Response Packet -->\", res.Response);\r\n//             districtList.value = res.Response.ARL1_List; //Assigning response values to getValues Object\r\n//           } else if (res.Type === \"ERROR\") {\r\n//             // Error response received during fetching\r\n//             Type: \"ERROR\";\r\n//             Response: {\r\n//               Error_Code: \"API-GET_GEO_LIST-E001\";\r\n//               Error_Msg: \"GET_GEO_LIST_API: Failed to execute query\";\r\n//             }\r\n//           }\r\n//         },\r\n//       });\r\n//     }\r\n//   } catch (error) {\r\n//     console.log(error);\r\n//   }\r\n// };\r\nonMounted(() => {\r\n  // fetchCountry();\r\n});\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n@import \"../Style/BIOMD.scss\";\r\n</style>\r\n","import script from \"./MANUFACTURER-ManufacturerInformation.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./MANUFACTURER-ManufacturerInformation.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./MANUFACTURER-ManufacturerInformation.vue?vue&type=style&index=0&id=32567c96&lang=scss&scoped=true\"\n\nimport exportComponent from \"/mnt/d/Dev/MEMS/src/client/web/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-32567c96\"]])\n\nexport default __exports__","import { render } from \"./MANUFACTURER.vue?vue&type=template&id=2cb8fa7a&scoped=true\"\nimport script from \"./MANUFACTURER.vue?vue&type=script&lang=js\"\nexport * from \"./MANUFACTURER.vue?vue&type=script&lang=js\"\n\nimport \"./MANUFACTURER.vue?vue&type=style&index=0&id=2cb8fa7a&lang=scss&scoped=true\"\n\nimport exportComponent from \"/mnt/d/Dev/MEMS/src/client/web/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-2cb8fa7a\"]])\n\nexport default __exports__","<template>\r\n  <!-- reusable Button Block -->\r\n  <div\r\n    class=\"row d-flex align-items-center justify-content-center button fw-bold buttonBackground\"\r\n    :style=\"'--color:' + backgroundColor\"\r\n  >\r\n    <div\r\n      class=\"col-sm-10 bodyText d-flex justify-content-center align-center mt-3\"\r\n    >\r\n      <p class=\"pe-2 fsXs\">{{ BtnName }}</p>\r\n      <div class=\"iconFont text-light\">\r\n        <font-awesome-icon :icon=\"icon\" size=\"1x\" />\r\n      </div>\r\n    </div>\r\n    <div class=\"col-sm-2 mx-auto\" v-if=\"showLoader\">\r\n      <img\r\n        src=\"../../../../assets/media/btn_loader.gif\"\r\n        alt=\"\"\r\n        class=\"gifImage\"\r\n      />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nconst props = defineProps({\r\n  BtnName: {\r\n    type: String,\r\n    default: \"Button\",\r\n  },\r\n  showLoader: {\r\n    type: Boolean,\r\n    default: false,\r\n  },\r\n  backgroundColor: {\r\n    type: String,\r\n    default: \"#586974\",\r\n  },\r\n  icon: null,\r\n});\r\n\r\nlet icon = props.icon;\r\n\r\n// const emit = defineEmits([\"onUserClick\"]);\r\n\r\n// function emitClickEvent() {\r\n//   emit(\"onUserClick\");\r\n// }\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.gifImage {\r\n  height: 20px;\r\n  width: 20px;\r\n}\r\n\r\n.button {\r\n  max-width: 300px !important;\r\n  min-width: 300px !important;\r\n  max-height: 50px !important;\r\n  min-height: 50px !important;\r\n  border: none;\r\n  border-radius: 5px;\r\n  font-size: 14px !important;\r\n  font-style: normal;\r\n  color: #ffffff;\r\n  cursor: pointer;\r\n}\r\n\r\n.buttonBackground {\r\n  background-color: var(--color);\r\n}\r\n</style>\r\n","import script from \"./UI-Btn.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./UI-Btn.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./UI-Btn.vue?vue&type=style&index=0&id=e1e01dc0&lang=scss&scoped=true\"\n\nimport exportComponent from \"/mnt/d/Dev/MEMS/src/client/web/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-e1e01dc0\"]])\n\nexport default __exports__","import script from \"./UI-FormHeader.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./UI-FormHeader.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./UI-FormHeader.vue?vue&type=style&index=0&id=7885740e&lang=scss&scoped=true\"\n\nimport exportComponent from \"/mnt/d/Dev/MEMS/src/client/web/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-7885740e\"]])\n\nexport default __exports__"],"names":["name","props","tabid","type","String","emits","setup","emit","props_variable","toRefs","store","useStore","Institute_Code","computed","state","globalStore","UserInfo","Institute_Info","Code","manufacturerInfo","ref","manufacturerName","Global_Manufacturer_Definition","manufacturerAddress","Country","State","District","changeServiceState","serviceState","dispatch","redirectToPage","service","tabcode","value","status","changePage","page","sendSocketReq","request","createRecord","data","Expiry","Type","Request","Module","ServiceCode","API","collection","record","ManufacturerRecord","serialize","callback","res","console","log","Response","getValues","Site_Info","goBack","provide","components","ManufacturerInformation","Btn2","Btn","Header","inject","onMounted","__exports__","icon","class","_createElementBlock","_createElementVNode","_createVNode","_component_Header","title","subTitle","_component_Btn2","BtnName","backgroundColor","onClick","$setup","_component_ManufacturerInformation","_component_Btn"],"sourceRoot":""}