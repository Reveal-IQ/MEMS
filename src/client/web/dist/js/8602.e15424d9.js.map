{"version":3,"file":"js/8602.e15424d9.js","mappings":"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","sources":["webpack://mems-client/./src/components/BIOMD/BIOMD/BIOMD-FACILITY/FACILITY-FacilityInformation.vue","webpack://mems-client/./src/components/BIOMD/BIOMD/BIOMD-FACILITY/FACILITY-FacilityInformation.vue?9df1","webpack://mems-client/./src/components/BIOMD/BIOMD/BIOMD-UI/UI-TagInput.vue","webpack://mems-client/./src/components/BIOMD/BIOMD/BIOMD-UI/UI-TagInput.vue?6968"],"sourcesContent":["<template>\r\n  <main>\r\n    <Section sectionTitle=\"Facility Information\">\r\n      <div class=\"row row-cols-1 row-cols-sm-1 row-cols-md-2 row-cols-lg-2 g-3\">\r\n        <!-- Facility Name -->\r\n        <div class=\"col\">\r\n          <Input\r\n            label=\"Facility Name\"\r\n            type=\"text\"\r\n            id=\"facilityName\"\r\n            placeholder=\"Enter Facility Name\"\r\n            v-model=\"facilityInfo.facilityName\"\r\n          />\r\n        </div>\r\n        <!-- Country -->\r\n        <div class=\"col\">\r\n          <label for=\"countryList\" class=\"form-label\">Country</label>\r\n          <input\r\n            class=\"form-control\"\r\n            list=\"countryOptions\"\r\n            id=\"countryList\"\r\n            placeholder=\"Type to search...\"\r\n            v-model=\"facilityInfo.selectedCountry.Loci_Name_Country\"\r\n            @input=\"fetchCountry\"\r\n            autocomplete=\"off\"\r\n          />\r\n          <datalist id=\"countryOptions\">\r\n            <option\r\n              v-for=\"country in countryList\"\r\n              :key=\"country.index\"\r\n              :value=\"country.Loci_Name_Country\"\r\n            ></option>\r\n          </datalist>\r\n        </div>\r\n        <!-- Province/State/Region -->\r\n        <div class=\"col\">\r\n          <label for=\"stateList\" class=\"form-label\"\r\n            >Province/State/Region</label\r\n          >\r\n          <input\r\n            class=\"form-control\"\r\n            list=\"stateOptions\"\r\n            id=\"stateList\"\r\n            placeholder=\"Type to search...\"\r\n            v-model=\"facilityInfo.selectedState.Loci_Name_State\"\r\n            @input=\"fetchState\"\r\n            autocomplete=\"off\"\r\n          />\r\n          <datalist id=\"stateOptions\">\r\n            <option\r\n              v-for=\"state in stateList\"\r\n              :key=\"state.index\"\r\n              :value=\"state.Loci_Name_State\"\r\n            ></option>\r\n          </datalist>\r\n        </div>\r\n        <!-- City/District -->\r\n        <div class=\"col\">\r\n          <label for=\"districtList\" class=\"form-label\">District</label>\r\n          <input\r\n            class=\"form-control\"\r\n            list=\"districtOptions\"\r\n            id=\"districtList\"\r\n            placeholder=\"Type to search...\"\r\n            v-model=\"facilityInfo.selectedDistrict.Loci_Name_Area_L1\"\r\n            @input=\"fetchDistrict\"\r\n            autocomplete=\"off\"\r\n          />\r\n          <datalist id=\"districtOptions\">\r\n            <option\r\n              v-for=\"district in districtList\"\r\n              :key=\"district.index\"\r\n              :value=\"district.Loci_Name_Area_L1\"\r\n            ></option>\r\n          </datalist>\r\n        </div>\r\n      </div>\r\n      <div class=\"row g-3 mt-3\">\r\n        <!-- Street Address 1 -->\r\n        <div class=\"col-12\">\r\n          <Input\r\n            label=\"Street Address 1\"\r\n            type=\"text\"\r\n            id=\"street1\"\r\n            placeholder=\"Enter Street Address 1\"\r\n            v-model=\"facilityInfo.streetAddress1\"\r\n          />\r\n        </div>\r\n        <!-- Street Address 2 -->\r\n        <div class=\"col-12\">\r\n          <Input\r\n            label=\"Street Address 2\"\r\n            type=\"text\"\r\n            id=\"street2\"\r\n            placeholder=\"Enter Street Address 2\"\r\n            v-model=\"facilityInfo.streetAddress2\"\r\n          />\r\n        </div>\r\n        <!-- Zip / Postal Code -->\r\n        <div class=\"col-lg-6\">\r\n          <Input\r\n            label=\"Zip/Postal Code\"\r\n            type=\"number\"\r\n            id=\"zip\"\r\n            placeholder=\"Enter Zip/Postal Code\"\r\n            v-model=\"facilityInfo.zipCode\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </Section>\r\n  </main>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, inject, onMounted } from \"vue\";\r\nimport { useStore } from \"vuex\";\r\nimport Input from \"../BIOMD-UI/UI-Input.vue\";\r\nimport Section from \"../BIOMD-UI/UI-Section.vue\";\r\nimport UITagInput from \"../BIOMD-UI/UI-TagInput.vue\";\r\n\r\nconst store = useStore();\r\nconst facilityInfo = inject(\"facilityInfo\");\r\nconst GlobalFacilityDefinition = inject(\"GlobalFacilityDefinition\");\r\nconst countryList = ref(null);\r\nconst stateList = ref(null);\r\nconst districtList = ref(null);\r\n\r\nconst sendSocketReq = (request) => {\r\n  store.dispatch(\"sendSocketReq\", request);\r\n};\r\nconst fetchCountry = async (event) => {\r\n  try {\r\n    const selectedCountry = event ? event.target.value : \"\";\r\n    if (\r\n      event &&\r\n      (!(event instanceof InputEvent) ||\r\n        event.inputType === \"insertReplacementText\")\r\n    ) {\r\n      // determine if the value is in the datalist. If so, someone selected a value in the list!\r\n      facilityInfo.value.selectedCountry = countryList.value.find((country) => {\r\n        return selectedCountry === country.Loci_Name_Country;\r\n      });\r\n      GlobalFacilityDefinition.value.facilityAddress.Country =\r\n        facilityInfo.value.selectedCountry.Loci_Code_Country;\r\n      // validateInput(\"Country\");\r\n      await fetchState();\r\n    } else {\r\n      // Clear Country, State, District, Mandal, Postal Code\r\n      GlobalFacilityDefinition.value.facilityAddress.Country = null;\r\n      GlobalFacilityDefinition.value.facilityAddress.State = null;\r\n      facilityInfo.value.selectedState = {\r\n        Loci_Name_Country: null,\r\n        Loci_Code_Country: null,\r\n      };\r\n      GlobalFacilityDefinition.value.facilityAddress.District = null;\r\n      facilityInfo.value.selectedDistrict = {\r\n        Loci_Name_Area_L1: null,\r\n        Loci_Code_Area_L1: null,\r\n      };\r\n      sendSocketReq({\r\n        data: {\r\n          Expiry: 20000,\r\n          Type: \"REQUEST\",\r\n          Request: {\r\n            Module: \"GLOBAL\",\r\n            ServiceCode: \"GLOBL\",\r\n            API: \"GET_GEO_LIST\",\r\n            Max_List: 500,\r\n            Criteria: {\r\n              Type_Code: \"CNTY\",\r\n              Loci_Name_Country: \"\",\r\n            },\r\n          },\r\n        },\r\n        callback: (res) => {\r\n          if (res.Type === \"RESPONSE\") {\r\n            console.log(\"Response Packet -->\", res.Response);\r\n            countryList.value = res.Response.Country_List; //Assigning response values to getValues Object\r\n          } else if (res.Type === \"ERROR\") {\r\n            // Error response received during fetching\r\n            Type: \"ERROR\";\r\n            Response: {\r\n              Error_Code: \"API-GET_GEO_LIST-E001\";\r\n              Error_Msg: \"GET_GEO_LIST_API: Failed to execute query\";\r\n            }\r\n          }\r\n        },\r\n      });\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\nconst fetchState = async (event) => {\r\n  try {\r\n    const selectedState = event ? event.target.value : \"\";\r\n    if (\r\n      event &&\r\n      (!(event instanceof InputEvent) ||\r\n        event.inputType === \"insertReplacementText\")\r\n    ) {\r\n      // determine if the value is in the datalist. If so, someone selected a value in the list!\r\n      facilityInfo.value.selectedState = stateList.value.find((state) => {\r\n        return selectedState === state.Loci_Name_State;\r\n      });\r\n      GlobalFacilityDefinition.value.facilityAddress.State =\r\n        facilityInfo.value.selectedState.Loci_Code_State;\r\n      // validateInput(\"Country\");\r\n      await fetchDistrict();\r\n    } else {\r\n      // Clear Country, State, District, Mandal, Postal Code\r\n      GlobalFacilityDefinition.value.facilityAddress.State = null;\r\n      GlobalFacilityDefinition.value.facilityAddress.District = null;\r\n      facilityInfo.value.selectedDistrict = {\r\n        Loci_Name_Area_L1: null,\r\n        Loci_Code_Area_L1: null,\r\n      };\r\n      sendSocketReq({\r\n        data: {\r\n          Expiry: 20000,\r\n          Type: \"REQUEST\",\r\n          Request: {\r\n            Module: \"GLOBAL\",\r\n            ServiceCode: \"GLOBL\",\r\n            API: \"GET_GEO_LIST\",\r\n            Max_List: 500,\r\n            Criteria: {\r\n              Type_Code: \"STATE\",\r\n              Loci_Code_Country:\r\n                GlobalFacilityDefinition.value.facilityAddress.Country,\r\n              Loci_Name_State: \"\",\r\n            },\r\n          },\r\n        },\r\n        callback: (res) => {\r\n          if (res.Type === \"RESPONSE\") {\r\n            console.log(\"Response Packet -->\", res.Response);\r\n            stateList.value = res.Response.State_List; //Assigning response values to getValues Object\r\n          } else if (res.Type === \"ERROR\") {\r\n            // Error response received during fetching\r\n            Type: \"ERROR\";\r\n            Response: {\r\n              Error_Code: \"API-GET_GEO_LIST-E001\";\r\n              Error_Msg: \"GET_GEO_LIST_API: Failed to execute query\";\r\n            }\r\n          }\r\n        },\r\n      });\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nconst fetchDistrict = async (event) => {\r\n  try {\r\n    const selectedDistrict = event ? event.target.value : \"\";\r\n    if (\r\n      event &&\r\n      (!(event instanceof InputEvent) ||\r\n        event.inputType === \"insertReplacementText\")\r\n    ) {\r\n      // determine if the value is in the datalist. If so, someone selected a value in the list!\r\n      facilityInfo.value.selectedDistrict = districtList.value.find((state) => {\r\n        return selectedDistrict === state.Loci_Name_Area_L1;\r\n      });\r\n      GlobalFacilityDefinition.value.facilityAddress.District =\r\n        facilityInfo.value.selectedDistrict.Loci_Code_Area_L1;\r\n      // validateInput(\"Country\");\r\n      // await fetchState();\r\n    } else {\r\n      // Clear Country, State, District, Mandal, Postal Code\r\n      GlobalFacilityDefinition.value.facilityAddress.District = null;\r\n      sendSocketReq({\r\n        data: {\r\n          Expiry: 20000,\r\n          Type: \"REQUEST\",\r\n          Request: {\r\n            Module: \"GLOBAL\",\r\n            ServiceCode: \"GLOBL\",\r\n            API: \"GET_GEO_LIST\",\r\n            Max_List: 500,\r\n            Criteria: {\r\n              Type_Code: \"ARL1\",\r\n              Loci_Code_Country:\r\n                GlobalFacilityDefinition.value.facilityAddress.Country,\r\n              Loci_Code_State:\r\n                GlobalFacilityDefinition.value.facilityAddress.State,\r\n              Loci_Name_District: \"\",\r\n            },\r\n          },\r\n        },\r\n        callback: (res) => {\r\n          if (res.Type === \"RESPONSE\") {\r\n            console.log(\"Response Packet -->\", res.Response);\r\n            districtList.value = res.Response.ARL1_List; //Assigning response values to getValues Object\r\n          } else if (res.Type === \"ERROR\") {\r\n            // Error response received during fetching\r\n            Type: \"ERROR\";\r\n            Response: {\r\n              Error_Code: \"API-GET_GEO_LIST-E001\";\r\n              Error_Msg: \"GET_GEO_LIST_API: Failed to execute query\";\r\n            }\r\n          }\r\n        },\r\n      });\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\nonMounted(() => {\r\n  fetchCountry();\r\n});\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n@import \"../Style/BIOMD.scss\";\r\n</style>\r\n","import script from \"./FACILITY-FacilityInformation.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./FACILITY-FacilityInformation.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./FACILITY-FacilityInformation.vue?vue&type=style&index=0&id=797f5c5a&lang=scss&scoped=true\"\n\nimport exportComponent from \"/mnt/d/Dev/MEMS/src/client/web/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-797f5c5a\"]])\n\nexport default __exports__","// ui tag reference from https://github.com/mayank1513/tag-input\r\n\r\n<template>\r\n  <label :for=\"id\" v-if=\"label\" class=\"form-label\">{{ label }}</label>\r\n  <div\r\n    class=\"tag-input\"\r\n    :class=\"{ 'with-count': showCount, duplicate: noMatchingTag }\"\r\n  >\r\n    <input\r\n      v-model=\"newTag\"\r\n      type=\"text\"\r\n      :list=\"id\"\r\n      autocomplete=\"off\"\r\n      @keydown.prevent.enter=\"addTag(newTag)\"\r\n      @keydown.prevent.tab=\"addTag(newTag)\"\r\n      @keydown.delete=\"newTag.length || removeTag(tags.length - 1)\"\r\n      @input=\"addTagIfDelem(newTag)\"\r\n      :style=\"{ 'padding-left': `${paddingLeft}px` }\"\r\n      :placeholder=\"placeholder\"\r\n    />\r\n\r\n    <datalist v-if=\"options\" :id=\"id\">\r\n      <option v-for=\"option in availableOptions\" :key=\"option\" :value=\"option\">\r\n        {{ option }}\r\n      </option>\r\n    </datalist>\r\n\r\n    <ul class=\"tags\" ref=\"tagsUl\">\r\n      <li\r\n        v-for=\"(tag, index) in tags\"\r\n        :key=\"tag\"\r\n        :class=\"{\r\n          duplicate: tag === duplicate,\r\n          tag: tagsClass.length == 0,\r\n          [tagsClass]: true,\r\n        }\"\r\n      >\r\n        <span class=\"badge bg-secondary rounded-pill\">\r\n          {{ tag }}\r\n          <button\r\n            type=\"button\"\r\n            class=\"btn-close btn-close-white ms-2\"\r\n            @click=\"removeTag(index)\"\r\n            aria-label=\"Close\"\r\n          ></button>\r\n        </span>\r\n      </li>\r\n    </ul>\r\n    <div v-if=\"showCount\" class=\"count\">\r\n      <span>{{ tags.length }}</span> tags\r\n    </div>\r\n  </div>\r\n  <small v-show=\"noMatchingTag\" class=\"err\">Custom tags not allowed</small>\r\n</template>\r\n\r\n<script>\r\nimport { ref, watch, nextTick, onMounted, computed } from \"vue\";\r\n\r\nexport default {\r\n  name: \"TagInput\",\r\n  props: {\r\n    name: { type: String, default: \"\" },\r\n    label: { type: String, default: \"\" },\r\n    placeholder: { type: String, default: \"Enter a tag\" },\r\n    modelValue: { type: Array, default: () => [] },\r\n    options: { type: Array, default: () => [] },\r\n    allowCustom: { type: Boolean, default: true },\r\n    showCount: { type: Boolean, default: false },\r\n    tagTextColor: { type: String, default: \"white\" },\r\n    tagBgColor: { type: String, default: \"rgb(250, 104, 104)\" },\r\n    tagClass: { type: String, default: \"\" },\r\n    customDelimiter: {\r\n      type: [String, Array],\r\n      default: () => [],\r\n      validator: (val) => {\r\n        if (typeof val == \"string\") return val.length == 1;\r\n        for (let i = 0; i < val.length; i++) {\r\n          if (typeof val[i] != \"string\" || val[i].length != 1) return false;\r\n        }\r\n        return true;\r\n      },\r\n    },\r\n  },\r\n  setup(props, { emit }) {\r\n    // Tags\r\n    const tags = ref(props.modelValue);\r\n    const tagsClass = ref(props.tagClass);\r\n    const newTag = ref(\"\");\r\n    const id = Math.random().toString(36).substring(7);\r\n    const customDelimiter = [\r\n      ...new Set(\r\n        (typeof props.customDelimiter == \"string\"\r\n          ? [props.customDelimiter]\r\n          : props.customDelimiter\r\n        ).filter((it) => it.length == 1)\r\n      ),\r\n    ];\r\n\r\n    // handling duplicates\r\n    const duplicate = ref(null);\r\n    const handleDuplicate = (tag) => {\r\n      duplicate.value = tag;\r\n      setTimeout(() => (duplicate.value = null), 1000);\r\n      newTag.value = \"\";\r\n    };\r\n    const noMatchingTag = ref(false);\r\n    function handleNoMatchingTag() {\r\n      noMatchingTag.value = true;\r\n      setTimeout(() => (noMatchingTag.value = false), 500);\r\n      let v = newTag.value;\r\n      if (customDelimiter.includes(v.charAt(v.length - 1)))\r\n        newTag.value = v.substr(0, v.length - 1);\r\n    }\r\n    const addTag = (tag) => {\r\n      tag = tag.trim();\r\n      if (!tag) return; // prevent empty tag\r\n      // only allow predefined tags when allowCustom is false\r\n      if (!props.allowCustom && !props.options.includes(tag)) {\r\n        //   display not a valid tag\r\n        handleNoMatchingTag();\r\n        return;\r\n      }\r\n      // return early if duplicate\r\n      if (tags.value.includes(tag)) {\r\n        handleDuplicate(tag);\r\n        return;\r\n      }\r\n      tags.value.push(tag);\r\n      newTag.value = \"\"; // reset newTag\r\n    };\r\n    const addTagIfDelem = (tag) => {\r\n      if (!customDelimiter || customDelimiter.length == 0) return;\r\n      if (customDelimiter.includes(tag.charAt(tag.length - 1)))\r\n        addTag(tag.substr(0, tag.length - 1));\r\n    };\r\n    const removeTag = (index) => {\r\n      tags.value.splice(index, 1);\r\n    };\r\n\r\n    // positioning and handling tag change\r\n    const paddingLeft = ref(10);\r\n    const tagsUl = ref(null);\r\n    const onTagsChange = () => {\r\n      // position cursor\r\n      const extraCushion = 15;\r\n      // tagsUl.value.style.setProperty(\"--tagBgColor\", props.tagBgColor);\r\n      // tagsUl.value.style.setProperty(\"--tagTextColor\", props.tagTextColor);\r\n      paddingLeft.value = tagsUl.value.clientWidth + extraCushion;\r\n      // scroll to end of tags\r\n      tagsUl.value.scrollTo(tagsUl.value.scrollWidth, 0);\r\n      // emit value on tags change\r\n      emit(\"update:modelValue\", tags.value);\r\n    };\r\n    watch(tags, () => nextTick(onTagsChange), { deep: true });\r\n    onMounted(onTagsChange);\r\n\r\n    // options\r\n    const availableOptions = computed(() => {\r\n      if (!props.options) return false;\r\n      return props.options.filter((option) => !tags.value.includes(option));\r\n    });\r\n\r\n    return {\r\n      tags,\r\n      tagsClass,\r\n      newTag,\r\n      addTag,\r\n      addTagIfDelem,\r\n      removeTag,\r\n      paddingLeft,\r\n      tagsUl,\r\n      availableOptions,\r\n      id,\r\n      duplicate,\r\n      noMatchingTag,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n* {\r\n  box-sizing: border-box;\r\n}\r\n\r\n.tag-input {\r\n  position: relative;\r\n}\r\n\r\nul {\r\n  list-style: none;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 7px;\r\n  margin: 0;\r\n  padding: 0;\r\n  position: absolute;\r\n  top: 0;\r\n  bottom: 0;\r\n  left: 10px;\r\n  max-width: 100%;\r\n  overflow-x: scroll;\r\n  -ms-overflow-style: none;\r\n  scrollbar-width: none;\r\n}\r\n\r\nul::-webkit-scrollbar {\r\n  display: none; /* Safari and Chrome */\r\n}\r\n\r\n/* .tag {\r\n  background: rgb(94, 94, 94);\r\n  padding: 5px;\r\n  border-radius: 15px;\r\n  color: var(--tagTextColor);\r\n  white-space: nowrap;\r\n  transition: 0.1s ease background;\r\n  align-items: center;\r\n} */\r\n\r\n.btn-close {\r\n  box-shadow: none;\r\n}\r\n\r\n.tag.duplicate {\r\n  animation: shake 1s;\r\n}\r\n\r\n.duplicate input {\r\n  outline: rgb(40, 182, 229);\r\n  border: 1px solid rgb(235, 27, 27);\r\n  animation: shake1 0.5s;\r\n}\r\n\r\ninput {\r\n  width: 100%;\r\n  padding: 10px;\r\n}\r\n\r\n.count {\r\n  position: absolute;\r\n  top: 50%;\r\n  transform: translateY(-50%);\r\n  right: 10px;\r\n  display: block;\r\n  font-size: 0.8rem;\r\n  white-space: nowrap;\r\n}\r\n\r\n.count span {\r\n  background: #eee;\r\n  padding: 2px;\r\n  border-radius: 2px;\r\n}\r\n\r\n.with-count input {\r\n  padding-right: 60px;\r\n}\r\n\r\n.with-count ul {\r\n  max-width: 60%;\r\n}\r\n\r\n.err {\r\n  color: red;\r\n}\r\n\r\n@keyframes shake {\r\n  10%,\r\n  90% {\r\n    transform: scale(0.9) translate3d(-1px, 0, 0);\r\n  }\r\n  20%,\r\n  80% {\r\n    transform: scale(0.9) translate3d(2px, 0, 0);\r\n  }\r\n  30%,\r\n  50%,\r\n  70% {\r\n    transform: scale(0.9) translate3d(-4px, 0, 0);\r\n  }\r\n  40%,\r\n  60% {\r\n    transform: scale(0.9) translate3d(4px, 0, 0);\r\n  }\r\n}\r\n@keyframes shake1 {\r\n  10%,\r\n  90% {\r\n    transform: scale(0.99) translate3d(-1px, 0, 0);\r\n  }\r\n  20%,\r\n  80% {\r\n    transform: scale(0.98) translate3d(2px, 0, 0);\r\n  }\r\n  30%,\r\n  50%,\r\n  70% {\r\n    transform: scale(1) translate3d(-4px, 0, 0);\r\n  }\r\n  40%,\r\n  60% {\r\n    transform: scale(0.98) translate3d(4px, 0, 0);\r\n  }\r\n}\r\n</style>\r\n","import { render } from \"./UI-TagInput.vue?vue&type=template&id=095692d7&scoped=true\"\nimport script from \"./UI-TagInput.vue?vue&type=script&lang=js\"\nexport * from \"./UI-TagInput.vue?vue&type=script&lang=js\"\n\nimport \"./UI-TagInput.vue?vue&type=style&index=0&id=095692d7&scoped=true&lang=css\"\n\nimport exportComponent from \"/mnt/d/Dev/MEMS/src/client/web/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-095692d7\"]])\n\nexport default __exports__"],"names":["store","useStore","facilityInfo","inject","GlobalFacilityDefinition","countryList","ref","stateList","districtList","sendSocketReq","request","dispatch","fetchCountry","async","selectedCountry","event","target","value","InputEvent","inputType","facilityAddress","Country","State","selectedState","Loci_Name_Country","Loci_Code_Country","District","selectedDistrict","Loci_Name_Area_L1","Loci_Code_Area_L1","data","Expiry","Type","Request","Module","ServiceCode","API","Max_List","Criteria","Type_Code","callback","res","console","log","Response","Country_List","find","country","fetchState","error","Loci_Name_State","State_List","state","Loci_Code_State","fetchDistrict","Loci_Name_District","ARL1_List","onMounted","__exports__","class","$props","_createElementBlock","for","$setup","_hoisted_1","_createElementVNode","duplicate","$event","type","list","autocomplete","onKeydown","length","onInput","style","placeholder","id","_Fragment","_renderList","option","key","_hoisted_4","tag","index","onClick","_toDisplayString","name","props","String","default","label","modelValue","Array","options","allowCustom","Boolean","showCount","tagTextColor","tagBgColor","tagClass","customDelimiter","validator","val","i","setup","emit","tags","tagsClass","newTag","Math","random","toString","substring","Set","filter","it","handleDuplicate","setTimeout","noMatchingTag","handleNoMatchingTag","v","includes","charAt","substr","addTag","trim","push","addTagIfDelem","removeTag","splice","paddingLeft","tagsUl","onTagsChange","extraCushion","clientWidth","scrollTo","scrollWidth","watch","nextTick","deep","availableOptions","computed","render"],"sourceRoot":""}