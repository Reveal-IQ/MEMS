{"version":3,"file":"js/8675.baec0e41.js","mappings":"uvDAgHMA,GAAQC,EAAAA,EAAAA,MACRC,EAAiBC,IACrBH,EAAMI,SAAS,gBAAiBD,IAG5BE,GAAYC,EAAAA,EAAAA,IAAI,IAChBC,GAAeD,EAAAA,EAAAA,IAAI,MACnBE,GAAcF,EAAAA,EAAAA,KAAI,IAAIG,MAAOC,sBAC7BC,EAAe,KACnB,MAAMC,EAAY,KACZC,GAAU,IAAIJ,MAAOK,cAC3B,IAAK,IAAIC,EAAIF,EAASE,GAAKH,EAAWG,IACpCV,EAAUW,MAAQ,IAAIX,EAAUW,MAAOD,IAIrCE,GAAaX,EAAAA,EAAAA,IAAI,IACjBY,GAAiBZ,EAAAA,EAAAA,IAAI,GACrBa,GAAeb,EAAAA,EAAAA,IAAI,GAEnBc,EAAcC,UAClBC,QAAQC,IAAI,oBACZ,IACErB,EAAc,CACZsB,KAAM,CACJC,OAAQ,IACRC,KAAM,UACNC,QAAS,CACPC,OAAQ,OACRC,YAAa,QACbC,IAAK,cACLC,WAAY,SACZC,YAAa,CACXC,KAAM1B,EAAaS,SAIzBkB,SAAWC,IACT,GAAiB,aAAbA,EAAIT,KAAqB,CAC3BJ,QAAQC,IAAI,yBAAuBY,EAAIC,UACvCnB,EAAWD,MAAQmB,EAAIC,SAASC,QAEhCnB,EAAeF,MAAQ,EACvBG,EAAaH,MAAQ,EACrB,IAAIsB,EAAYrB,EAAWD,MAC3BsB,EAAUC,SAASC,IACjBrB,EAAaH,OAASwB,EAAMC,UAC5BvB,EAAeF,OAASwB,EAAME,wBAEvBP,EAAIT,QASnB,MAAOiB,GACPrB,QAAQC,IAAIoB,KAKVC,EAAavB,MAAOwB,EAAMC,KAC9BC,EAAK,aAAcF,EAAMC,I,OAG3BE,EAAAA,EAAAA,KAAU,KACRrC,O,qgDClLF,MAAMsC,EAAc,EAEpB,S,+rBCFA,MAAMA,EAAc,EAEpB","sources":["webpack://mems-client/./src/components/BIOMD/BIOMD/BIOMD-REPORTS/REPORTS-AnnualInflow.vue","webpack://mems-client/./src/components/BIOMD/BIOMD/BIOMD-REPORTS/REPORTS-AnnualInflow.vue?04d2","webpack://mems-client/./src/components/BIOMD/BIOMD/BIOMD-UI/UI-StatCard.vue"],"sourcesContent":["<template>\r\n  <div class=\"container-fluid\">\r\n    <nav class=\"d-flex gap-3 p-2\">\r\n      <small\r\n        class=\"text-secondary\"\r\n        style=\"cursor: pointer\"\r\n        @click=\"\r\n          changePage('reportsList', {\r\n            facilityName: props.facilityName,\r\n          })\r\n        \"\r\n        >Back</small\r\n      >\r\n    </nav>\r\n\r\n    <div class=\"d-flex flex-column p-2 mt-4\">\r\n      <span class=\"title text-dark fw-normal fs-3\"\r\n        >Annual Medical Devices Inflow</span\r\n      >\r\n      <nav class=\"d-flex gap-3 p-1\">\r\n        <small class=\"text-secondary\" style=\"cursor: pointer\">Print</small>\r\n        <small class=\"text-secondary\" style=\"cursor: pointer\">CSV Export</small>\r\n        <small class=\"text-secondary\" style=\"cursor: pointer\">Download</small>\r\n      </nav>\r\n    </div>\r\n\r\n    <div class=\"p-2 mt-4\">\r\n      <small class=\"text-secondary\"\r\n        >Type and count of devices added to inventory for the selected year.\r\n      </small>\r\n    </div>\r\n\r\n    <div class=\"row mt-4\">\r\n      <div class=\"col-lg-4\">\r\n        <div class=\"form-floating\">\r\n          <select\r\n            name=\"year\"\r\n            id=\"yearId\"\r\n            v-model=\"selectedYear\"\r\n            class=\"form-select\"\r\n            :onChange=\"() => fetchReport()\"\r\n          >\r\n            <option v-for=\"(year, y) in yearsList\" :key=\"y\" :value=\"year\">\r\n              {{ year }}\r\n            </option>\r\n          </select>\r\n          <label for=\"yearId\">Select Year</label>\r\n        </div>\r\n      </div>\r\n      <div class=\"mt-2 px-3\" v-if=\"selectedYear\">\r\n        <small\r\n          >Report generated for accepted assets from 1/1/{{ selectedYear }} to\r\n          {{ currentYear }}</small\r\n        >\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"mt-4 p-2\">\r\n      <span class=\"fw-bold fs-4\">{{ props.facilityName }}</span>\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n      <UIStatCard\r\n        cardTitle=\"Overall Accepted Devices\"\r\n        :statisticsValue=\"overallDevices\"\r\n        class=\"fs-4 fw-normal\"\r\n      />\r\n      <UIStatCard\r\n        cardTitle=\"Overall Value\"\r\n        :statisticsValue=\"'$'+overallValue\"\r\n        class=\"fs-4 fw-normal\"\r\n      />\r\n    </div>\r\n    <div class=\"mt-2 table-responsive\" v-for=\"asset in reportList\">\r\n      <table class=\"table table-responsive table-borderless mb-2\">\r\n        <thead>\r\n          <tr style=\"background-color: #f5f6f6\">\r\n            <th scope=\"col\" width=\"20%\">\r\n              <small class=\"text-secondary fw-normal\">Device Code</small>\r\n            </th>\r\n            <th scope=\"col\" width=\"50%\">\r\n              <small class=\"text-secondary fw-normal\">Device Description</small>\r\n            </th>\r\n            <th scope=\"col\">\r\n              <small class=\"text-secondary fw-normal\">Accepted Devices</small>\r\n            </th>\r\n            <th scope=\"col\">\r\n              <small class=\"text-secondary fw-normal\">Total Value</small>\r\n            </th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr style=\"background-color: #f5f6f6\">\r\n            <td>\r\n              <small>{{ asset.UMDNSCode }}</small>\r\n            </td>\r\n            <td>\r\n              <small>{{ asset.description }}</small>\r\n            </td>\r\n            <td><small>{{ asset.acceptedDevices }}</small></td>\r\n            <td><small>{{ \"$\" + asset.totalCost }}</small></td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport UIStatCard from \"../BIOMD-UI/UI-StatCard\";\r\nimport { ref, onMounted } from \"vue\";\r\nimport { useStore } from \"vuex\";\r\nconst store = useStore();\r\nconst sendSocketReq = (request) => {\r\n  store.dispatch(\"sendSocketReq\", request);\r\n};\r\n\r\nconst yearsList = ref([]);\r\nconst selectedYear = ref(null);\r\nconst currentYear = ref(new Date().toLocaleDateString());\r\nconst getYearsList = () => {\r\n  const startYear = 1990;\r\n  const endYear = new Date().getFullYear();\r\n  for (let i = endYear; i >= startYear; i--) {\r\n    yearsList.value = [...yearsList.value, i];\r\n  }\r\n};\r\n\r\nconst reportList = ref([]);\r\nconst overallDevices = ref(0);\r\nconst overallValue = ref(0);\r\n\r\nconst fetchReport = async () => {\r\n  console.log(\"calling function\");\r\n  try {\r\n    sendSocketReq({\r\n      data: {\r\n        Expiry: 20000,\r\n        Type: \"REQUEST\",\r\n        Request: {\r\n          Module: \"MEMS\",\r\n          ServiceCode: \"BIOMD\",\r\n          API: \"GET_REPORTS\",\r\n          reportType: \"inflow\",\r\n          reportSpecs: {\r\n            year: selectedYear.value\r\n          }\r\n        },\r\n      },\r\n      callback: (res) => {\r\n        if (res.Type === \"RESPONSE\") {\r\n          console.log(\"Response Packet -->\", res.Response);\r\n          reportList.value = res.Response.records;\r\n          //calculate overall devices and value (should probably be pulled out into a seperate services just to be clean)\r\n          overallDevices.value = 0;\r\n          overallValue.value = 0;\r\n          var assetList = reportList.value;\r\n          assetList.forEach((asset) => {\r\n            overallValue.value += asset.totalCost;\r\n            overallDevices.value += asset.acceptedDevices;\r\n          });\r\n        } else if (res.Type === \"ERROR\") {\r\n          Type: \"ERROR\";\r\n          Response: {\r\n            Error_Code: \"API-CREATE_RECORD-E001\";\r\n            Error_Msg: \"CREATE_RECORD_API: Failed to execute query\";\r\n          }\r\n        }\r\n      },\r\n    });\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nconst emit = defineEmits([\"updatePage\"]);\r\nconst changePage = async (page, props) => {\r\n  emit(\"updatePage\", page, props);\r\n};\r\nconst props = defineProps([\"facilityName\", \"facilityID\"]);\r\nonMounted(() => {\r\n  getYearsList();\r\n});\r\n</script>\r\n\r\n<style lang=\"scss\" scoped></style>\r\n","import script from \"./REPORTS-AnnualInflow.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./REPORTS-AnnualInflow.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","import script from \"./UI-StatCard.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./UI-StatCard.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"names":["store","useStore","sendSocketReq","request","dispatch","yearsList","ref","selectedYear","currentYear","Date","toLocaleDateString","getYearsList","startYear","endYear","getFullYear","i","value","reportList","overallDevices","overallValue","fetchReport","async","console","log","data","Expiry","Type","Request","Module","ServiceCode","API","reportType","reportSpecs","year","callback","res","Response","records","assetList","forEach","asset","totalCost","acceptedDevices","error","changePage","page","props","emit","onMounted","__exports__"],"sourceRoot":""}