{"version":3,"file":"js/6348.694cbdc0.js","mappings":"8uDAqGMA,GAAQC,EAAAA,EAAAA,MACRC,EAAiBC,IACrBH,EAAMI,SAAS,gBAAiBD,IAE5BE,GAAYC,EAAAA,EAAAA,IAAI,IAChBC,GAAaD,EAAAA,EAAAA,IAAI,IACjBE,GAAeF,EAAAA,EAAAA,IAAI,GACnBG,GAAgBH,EAAAA,EAAAA,IAAI,GACpBI,GAAkBJ,EAAAA,EAAAA,IAAI,GAEtBK,EAAcC,UAClBC,QAAQC,IAAI,oBACZ,IACEZ,EAAc,CACZa,KAAM,CACJC,OAAQ,IACRC,KAAM,UACNC,QAAS,CACPC,OAAQ,OACRC,YAAa,QACbC,IAAK,cACLC,WAAY,gBAGhBC,SAAWC,IACT,GAAiB,aAAbA,EAAIP,KAAqB,CAC3BJ,QAAQC,IAAI,yBAAuBU,EAAIC,UACvClB,EAAWmB,MAAQF,EAAIC,SAASE,QAGhClB,EAAciB,MAAQ,EACtBhB,EAAgBgB,MAAQ,EACxBlB,EAAakB,MAAQ,EACrB,IAAIrB,EAAYE,EAAWmB,MAC3BrB,EAAUuB,SAASC,IACjBrB,EAAakB,OAASG,EAAMC,UAC5BrB,EAAciB,OAASG,EAAME,OAC7BrB,EAAgBgB,OAASG,EAAMG,iBAExBR,EAAIP,QASnB,MAAOgB,GACPpB,QAAQC,IAAImB,KAIVC,EAAatB,UACjB,IACEV,EAAc,CACZa,KAAM,CACJC,OAAQ,IACRC,KAAM,UACNC,QAAS,CACPC,OAAQ,OACRC,YAAa,QACbC,IAAK,cACLc,cAAc,EACdC,SAAU,IACVC,KAAM,CACJC,WAAY,QACZC,QAAS,CACP,CACEC,WAAY,UACZF,WAAY,QACZG,aAAc,MACdC,GAAI,SAEN,CACEF,WAAY,iBACZF,WAAY,eACZG,aAAc,MACdC,GAAI,gBAEN,CACEF,WAAY,aACZF,WAAY,WACZG,aAAc,MACdC,GAAI,aAGRC,WAAY,CACVC,IAAK,EACLC,UAAW,EACXC,UAAW,mBACXC,WAAY,oBACZC,UAAW,mBACXC,kBAAmB,2BACnBC,iBAAkB,iCAClBC,aAAc,6BAKtB5B,SAAWC,IACQ,aAAbA,EAAIP,MACNJ,QAAQC,IAAI,yBAAuBU,EAAIC,UACvCpB,EAAUqB,MAAQF,EAAIC,SAASE,SACtBH,EAAIP,QASnB,MAAOgB,GACPpB,QAAQC,IAAImB,KAIVmB,EAAaxC,MAAOyC,EAAMC,KAC9BC,EAAK,aAAcF,EAAMC,I,OAG3BE,EAAAA,EAAAA,KAAU,KACR7C,IACAuB,O,41CC9NF,MAAMuB,EAAc,EAEpB,S,+rBCFA,MAAMA,EAAc,EAEpB","sources":["webpack://mems-client/./src/components/BIOMD/BIOMD/BIOMD-REPORTS/REPORTS-Summary1.vue","webpack://mems-client/./src/components/BIOMD/BIOMD/BIOMD-REPORTS/REPORTS-Summary1.vue?6f12","webpack://mems-client/./src/components/BIOMD/BIOMD/BIOMD-UI/UI-StatCard.vue"],"sourcesContent":["<template>\r\n  <div class=\"container-fluid\">\r\n    <nav class=\"d-flex gap-3 p-2\">\r\n      <small\r\n        class=\"text-secondary\"\r\n        style=\"cursor: pointer\"\r\n        @click=\"\r\n          changePage('reportsList', {\r\n            facilityName: props.facilityName,\r\n          })\r\n        \"\r\n        >Back</small\r\n      >\r\n    </nav>\r\n\r\n    <div class=\"d-flex flex-column p-2 mt-4\">\r\n      <span class=\"title text-dark fw-normal fs-3\"\r\n        >Global Inventory Summary by Medical Device Description</span\r\n      >\r\n      <nav class=\"d-flex gap-3 p-1\">\r\n        <small class=\"text-secondary\" style=\"cursor: pointer\">Print</small>\r\n        <small class=\"text-secondary\" style=\"cursor: pointer\">CSV Export</small>\r\n        <small class=\"text-secondary\" style=\"cursor: pointer\">Download</small>\r\n      </nav>\r\n    </div>\r\n\r\n    <div class=\"p-2 mt-4\">\r\n      <small class=\"text-secondary\"\r\n        >List of active and inactive medical devices grouped by their device\r\n        description and the total value of active devices.\r\n      </small>\r\n    </div>\r\n    <div class=\"mt-4 p-2\">\r\n      <span class=\"fw-bold fs-4\">{{ props.facilityName }}</span>\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n      <UIStatCard\r\n        cardTitle=\"Overall Device Description\"\r\n        :statisticsValue=\"reportList.length\"\r\n        class=\"fs-4 fw-normal\"\r\n      />\r\n      <UIStatCard\r\n        cardTitle=\"Overall Active Devices\"\r\n        :statisticsValue=\"overallActive\"\r\n        class=\"fs-4 fw-normal\"\r\n      />\r\n      <UIStatCard\r\n        cardTitle=\"Overall Value\"\r\n        :statisticsValue=\"'$' + overallValue\"\r\n        class=\"fs-4 fw-normal\"\r\n      />\r\n      <UIStatCard\r\n        cardTitle=\"Overall Inactive Devices\"\r\n        :statisticsValue=\"overallInactive\"\r\n        class=\"fs-4 fw-normal\"\r\n      />\r\n    </div>\r\n    <div class=\"mt-2 table-responsive\" v-for=\"asset in reportList\">\r\n      <table class=\"table table-responsive table-borderless mb-2\">\r\n        <thead>\r\n          <tr style=\"background-color: #f5f6f6\">\r\n            <th scope=\"col\" width=\"20%\">\r\n              <small class=\"text-secondary fw-normal\">Device Code</small>\r\n            </th>\r\n            <th scope=\"col\" width=\"50%\">\r\n              <small class=\"text-secondary fw-normal\">Device Description</small>\r\n            </th>\r\n            <th scope=\"col\">\r\n              <small class=\"text-secondary fw-normal\">Active Devices</small>\r\n            </th>\r\n            <th scope=\"col\">\r\n              <small class=\"text-secondary fw-normal\">Total Value</small>\r\n            </th>\r\n            <th scope=\"col\">\r\n              <small class=\"text-secondary fw-normal\">Inactive Devices</small>\r\n            </th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr style=\"background-color: #f5f6f6\">\r\n            <td>\r\n              <small>{{ asset.UMDNSCode }}</small>\r\n            </td>\r\n            <td>\r\n              <small>{{ asset.description }}</small>\r\n            </td>\r\n            <td><small>{{ asset.active }}</small></td>\r\n            <td><small>{{\"$\" + asset.totalCost }}</small></td>\r\n            <td><small>{{ asset.inactive }}</small></td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted } from \"vue\";\r\nimport UIStatCard from \"../BIOMD-UI/UI-StatCard\";\r\nimport { useStore } from \"vuex\";\r\nconst store = useStore();\r\nconst sendSocketReq = (request) => {\r\n  store.dispatch(\"sendSocketReq\", request);\r\n};\r\nconst assetList = ref([]);\r\nconst reportList = ref([]);\r\nconst overallValue = ref(0);\r\nconst overallActive = ref(0);\r\nconst overallInactive = ref(0);\r\n\r\nconst fetchReport = async () => {\r\n  console.log(\"calling function\");\r\n  try {\r\n    sendSocketReq({\r\n      data: {\r\n        Expiry: 20000,\r\n        Type: \"REQUEST\",\r\n        Request: {\r\n          Module: \"MEMS\",\r\n          ServiceCode: \"BIOMD\",\r\n          API: \"GET_REPORTS\",\r\n          reportType: \"description\",\r\n        },\r\n      },\r\n      callback: (res) => {\r\n        if (res.Type === \"RESPONSE\") {\r\n          console.log(\"Response Packet -->\", res.Response);\r\n          reportList.value = res.Response.records;\r\n\r\n          //calculate overall metrics (should probably be pulled out into a seperate services just to be clean)\r\n          overallActive.value = 0;\r\n          overallInactive.value = 0;\r\n          overallValue.value = 0;\r\n          var assetList = reportList.value;\r\n          assetList.forEach((asset) => {\r\n            overallValue.value += asset.totalCost;\r\n            overallActive.value += asset.active;\r\n            overallInactive.value += asset.inactive;\r\n          });\r\n        } else if (res.Type === \"ERROR\") {\r\n          Type: \"ERROR\";\r\n          Response: {\r\n            Error_Code: \"API-CREATE_RECORD-E001\";\r\n            Error_Msg: \"CREATE_RECORD_API: Failed to execute query\";\r\n          }\r\n        }\r\n      },\r\n    });\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nconst fetchAsset = async () => {\r\n  try {\r\n    sendSocketReq({\r\n      data: {\r\n        Expiry: 20000,\r\n        Type: \"REQUEST\",\r\n        Request: {\r\n          Module: \"MEMS\",\r\n          ServiceCode: \"BIOMD\",\r\n          API: \"FIND_RECORD\",\r\n          return_array: true,\r\n          max_list: 100,\r\n          find: {\r\n            collection: \"Asset\",\r\n            lookups: [\r\n              {\r\n                localField: \"modelID\",\r\n                collection: \"Model\",\r\n                foreignField: \"_id\",\r\n                as: \"Model\",\r\n              },\r\n              {\r\n                localField: \"manufacturerID\",\r\n                collection: \"Manufacturer\",\r\n                foreignField: \"_id\",\r\n                as: \"Manufacturer\",\r\n              },\r\n              {\r\n                localField: \"facilityID\",\r\n                collection: \"Facility\",\r\n                foreignField: \"_id\",\r\n                as: \"Facility\",\r\n              },\r\n            ],\r\n            projection: {\r\n              _id: 1,\r\n              assetCode: 1,\r\n              modelName: \"$Model.modelName\",\r\n              commonName: \"$Model.commonName\",\r\n              UMDNSCode: \"$Model.UMDNSCode\",\r\n              deviceDescription: \"$Model.deviceDescription\",\r\n              manufacturerName: \"$Manufacturer.manufacturerName\",\r\n              facilityName: \"$Facility.facilityName\",\r\n            },\r\n          },\r\n        },\r\n      },\r\n      callback: (res) => {\r\n        if (res.Type === \"RESPONSE\") {\r\n          console.log(\"Response Packet -->\", res.Response);\r\n          assetList.value = res.Response.records;\r\n        } else if (res.Type === \"ERROR\") {\r\n          Type: \"ERROR\";\r\n          Response: {\r\n            Error_Code: \"API-CREATE_RECORD-E001\";\r\n            Error_Msg: \"CREATE_RECORD_API: Failed to execute query\";\r\n          }\r\n        }\r\n      },\r\n    });\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\nconst emit = defineEmits([\"updatePage\"]);\r\nconst changePage = async (page, props) => {\r\n  emit(\"updatePage\", page, props);\r\n};\r\nconst props = defineProps([\"facilityName\", \"facilityID\"]);\r\nonMounted(() => {\r\n  fetchReport();\r\n  fetchAsset();\r\n});\r\n</script>\r\n\r\n<style lang=\"scss\" scoped></style>","import script from \"./REPORTS-Summary1.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./REPORTS-Summary1.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","import script from \"./UI-StatCard.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./UI-StatCard.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"names":["store","useStore","sendSocketReq","request","dispatch","assetList","ref","reportList","overallValue","overallActive","overallInactive","fetchReport","async","console","log","data","Expiry","Type","Request","Module","ServiceCode","API","reportType","callback","res","Response","value","records","forEach","asset","totalCost","active","inactive","error","fetchAsset","return_array","max_list","find","collection","lookups","localField","foreignField","as","projection","_id","assetCode","modelName","commonName","UMDNSCode","deviceDescription","manufacturerName","facilityName","changePage","page","props","emit","onMounted","__exports__"],"sourceRoot":""}