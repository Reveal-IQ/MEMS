{"version":3,"file":"js/9261.3f9d3ef1.js","mappings":"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","sources":["webpack://client/./src/components/BIOMD/BIOMD/BIOMD-MANUFACTURER/MANUFACTURER-ManufacturerInformation.vue","webpack://client/./src/components/BIOMD/BIOMD/BIOMD-MANUFACTURER/MANUFACTURER-ManufacturerInformation.vue?76a9","webpack://client/./src/components/BIOMD/BIOMD/BIOMD-MANUFACTURER/MANUFACTURER.vue","webpack://client/./src/components/BIOMD/BIOMD/BIOMD-MANUFACTURER/MANUFACTURER.vue?c3d4"],"sourcesContent":["<template>\r\n  <main>\r\n    <!-- The main form -->\r\n    <Section sectionTitle=\"Manufacturer Information\">\r\n      <div class=\"row row-cols-1 row-cols-sm-1 row-cols-md-2 row-cols-lg-2 g-3\">\r\n        <!-- Manufacturer Name -->\r\n        <div class=\"col\">\r\n          <Input\r\n            label=\"Manufacturer Name\"\r\n            type=\"text\"\r\n            v-model=\"manufacturerInfo.manufacturerName\"\r\n            id=\"manufacturerName\"\r\n            placeholder=\"Enter Manufacturer Name\"\r\n          />\r\n        </div>\r\n        <!-- Country -->\r\n        <div class=\"col\">\r\n          <label for=\"countryList\" class=\"form-label\">Country</label>\r\n          <input\r\n            class=\"form-control\"\r\n            list=\"countryOptions\"\r\n            id=\"countryList\"\r\n            placeholder=\"Type to search...\"\r\n            v-model=\"manufacturerInfo.selectedCountry.Loci_Name_Country\"\r\n            @input=\"fetchCountry\"\r\n            autocomplete=\"off\"\r\n          />\r\n          <datalist id=\"countryOptions\">\r\n            <option\r\n              v-for=\"country in countryList\"\r\n              :key=\"country.index\"\r\n              :value=\"country.Loci_Name_Country\"\r\n            ></option>\r\n          </datalist>\r\n        </div>\r\n\r\n        <!-- Province/State/Region -->\r\n        <div class=\"col\">\r\n          <label for=\"stateList\" class=\"form-label\"\r\n            >Province/State/Region</label\r\n          >\r\n          <input\r\n            class=\"form-control\"\r\n            list=\"stateOptions\"\r\n            id=\"stateList\"\r\n            placeholder=\"Type to search...\"\r\n            v-model=\"manufacturerInfo.selectedState.Loci_Name_State\"\r\n            @input=\"fetchState\"\r\n            autocomplete=\"off\"\r\n          />\r\n          <datalist id=\"stateOptions\">\r\n            <option\r\n              v-for=\"state in stateList\"\r\n              :key=\"state.index\"\r\n              :value=\"state.Loci_Name_State\"\r\n            ></option>\r\n          </datalist>\r\n        </div>\r\n\r\n        <!-- City/District -->\r\n        <div class=\"col\">\r\n          <label for=\"districtList\" class=\"form-label\">District</label>\r\n          <input\r\n            class=\"form-control\"\r\n            list=\"districtOptions\"\r\n            id=\"districtList\"\r\n            placeholder=\"Type to search...\"\r\n            v-model=\"manufacturerInfo.selectedDistrict.Loci_Name_Area_L1\"\r\n            @input=\"fetchDistrict\"\r\n            autocomplete=\"off\"\r\n          />\r\n          <datalist id=\"districtOptions\">\r\n            <option\r\n              v-for=\"district in districtList\"\r\n              :key=\"district.index\"\r\n              :value=\"district.Loci_Name_Area_L1\"\r\n            ></option>\r\n          </datalist>\r\n        </div>\r\n      </div>\r\n      <div class=\"row g-3 mt-3\">\r\n        <!-- Street Address 1 -->\r\n        <div class=\"col-12\">\r\n          <Input\r\n            label=\"Street Address 1\"\r\n            type=\"text\"\r\n            v-model=\"manufacturerInfo.streetAddress1\"\r\n            id=\"street1\"\r\n            placeholder=\"Enter Street Address 1\"\r\n          />\r\n        </div>\r\n        <!-- Street Address 2 -->\r\n        <div class=\"col-12\">\r\n          <Input\r\n            label=\"Street Address 2\"\r\n            type=\"text\"\r\n            v-model=\"manufacturerInfo.streetAddress2\"\r\n            id=\"street2\"\r\n            placeholder=\"Enter Street Address 2\"\r\n          />\r\n        </div>\r\n        <!-- Zip / Postal Code -->\r\n        <div class=\"col-lg-3\">\r\n          <Input\r\n            label=\"Zip/Postal Code\"\r\n            type=\"number\"\r\n            v-model=\"manufacturerInfo.zipCode\"\r\n            id=\"zip\"\r\n            placeholder=\"Enter Zip/Postal Code\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </Section>\r\n  </main>\r\n</template>\r\n\r\n<script setup>\r\nimport { inject, ref, onMounted, computed } from \"vue\";\r\nimport { useStore } from \"vuex\";\r\nimport Input from \"../BIOMD-UI/UI-Input.vue\";\r\nimport Section from \"../BIOMD-UI/UI-Section.vue\";\r\nconst store = useStore();\r\nconst manufacturerInfo = inject(\"manufacturerInfo\");\r\nconst Global_Manufacturer_Definition = inject(\"Global_Manufacturer_Definition\");\r\nconst countryList = ref(null);\r\nconst stateList = ref(null);\r\nconst districtList = ref(null);\r\nconst sendSocketReq = (request) => {\r\n  store.dispatch(\"sendSocketReq\", request);\r\n};\r\nconst fetchCountry = async (event) => {\r\n  try {\r\n    const selectedCountry = event ? event.target.value : \"\";\r\n    if (\r\n      event &&\r\n      (!(event instanceof InputEvent) ||\r\n        event.inputType === \"insertReplacementText\")\r\n    ) {\r\n      // determine if the value is in the datalist. If so, someone selected a value in the list!\r\n      manufacturerInfo.value.selectedCountry = countryList.value.find(\r\n        (country) => {\r\n          return selectedCountry === country.Loci_Name_Country;\r\n        }\r\n      );\r\n      Global_Manufacturer_Definition.value.manufacturerAddress.Country =\r\n        manufacturerInfo.value.selectedCountry.Loci_Code_Country;\r\n      // validateInput(\"Country\");\r\n      await fetchState();\r\n    } else {\r\n      // Clear Country, State, District, Mandal, Postal Code\r\n      Global_Manufacturer_Definition.value.manufacturerAddress.Country = null;\r\n      Global_Manufacturer_Definition.value.manufacturerAddress.State = null;\r\n      manufacturerInfo.value.selectedState = {\r\n        Loci_Name_Country: null,\r\n        Loci_Code_Country: null,\r\n      };\r\n      Global_Manufacturer_Definition.value.manufacturerAddress.District = null;\r\n      manufacturerInfo.value.selectedDistrict = {\r\n        Loci_Name_Area_L1: null,\r\n        Loci_Code_Area_L1: null,\r\n      };\r\n      sendSocketReq({\r\n        data: {\r\n          Expiry: 20000,\r\n          Type: \"REQUEST\",\r\n          Request: {\r\n            Module: \"GLOBAL\",\r\n            ServiceCode: \"GLOBL\",\r\n            API: \"GET_GEO_LIST\",\r\n            Max_List: 500,\r\n            Criteria: {\r\n              Type_Code: \"CNTY\",\r\n              Loci_Name_Country: \"\",\r\n            },\r\n          },\r\n        },\r\n        callback: (res) => {\r\n          if (res.Type === \"RESPONSE\") {\r\n            console.log(\"Response Packet -->\", res.Response);\r\n            countryList.value = res.Response.Country_List; //Assigning response values to getValues Object\r\n          } else if (res.Type === \"ERROR\") {\r\n            // Error response received during fetching\r\n            Type: \"ERROR\";\r\n            Response: {\r\n              Error_Code: \"API-GET_GEO_LIST-E001\";\r\n              Error_Msg: \"GET_GEO_LIST_API: Failed to execute query\";\r\n            }\r\n          }\r\n        },\r\n      });\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\nconst fetchState = async (event) => {\r\n  try {\r\n    const selectedState = event ? event.target.value : \"\";\r\n    if (\r\n      event &&\r\n      (!(event instanceof InputEvent) ||\r\n        event.inputType === \"insertReplacementText\")\r\n    ) {\r\n      // determine if the value is in the datalist. If so, someone selected a value in the list!\r\n      manufacturerInfo.value.selectedState = stateList.value.find((state) => {\r\n        return selectedState === state.Loci_Name_State;\r\n      });\r\n      Global_Manufacturer_Definition.value.manufacturerAddress.State =\r\n        manufacturerInfo.value.selectedState.Loci_Code_State;\r\n      // validateInput(\"Country\");\r\n      await fetchDistrict();\r\n    } else {\r\n      // Clear Country, State, District, Mandal, Postal Code\r\n      Global_Manufacturer_Definition.value.manufacturerAddress.State = null;\r\n      Global_Manufacturer_Definition.value.manufacturerAddress.District = null;\r\n      manufacturerInfo.value.selectedDistrict = {\r\n        Loci_Name_Area_L1: null,\r\n        Loci_Code_Area_L1: null,\r\n      };\r\n      sendSocketReq({\r\n        data: {\r\n          Expiry: 20000,\r\n          Type: \"REQUEST\",\r\n          Request: {\r\n            Module: \"GLOBAL\",\r\n            ServiceCode: \"GLOBL\",\r\n            API: \"GET_GEO_LIST\",\r\n            Max_List: 500,\r\n            Criteria: {\r\n              Type_Code: \"STATE\",\r\n              Loci_Code_Country:\r\n                Global_Manufacturer_Definition.value.manufacturerAddress\r\n                  .Country,\r\n              Loci_Name_State: \"\",\r\n            },\r\n          },\r\n        },\r\n        callback: (res) => {\r\n          if (res.Type === \"RESPONSE\") {\r\n            console.log(\"Response Packet -->\", res.Response);\r\n            stateList.value = res.Response.State_List; //Assigning response values to getValues Object\r\n          } else if (res.Type === \"ERROR\") {\r\n            // Error response received during fetching\r\n            Type: \"ERROR\";\r\n            Response: {\r\n              Error_Code: \"API-GET_GEO_LIST-E001\";\r\n              Error_Msg: \"GET_GEO_LIST_API: Failed to execute query\";\r\n            }\r\n          }\r\n        },\r\n      });\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nconst fetchDistrict = async (event) => {\r\n  try {\r\n    const selectedDistrict = event ? event.target.value : \"\";\r\n    if (\r\n      event &&\r\n      (!(event instanceof InputEvent) ||\r\n        event.inputType === \"insertReplacementText\")\r\n    ) {\r\n      // determine if the value is in the datalist. If so, someone selected a value in the list!\r\n      manufacturerInfo.value.selectedDistrict = districtList.value.find(\r\n        (state) => {\r\n          return selectedDistrict === state.Loci_Name_Area_L1;\r\n        }\r\n      );\r\n      Global_Manufacturer_Definition.value.manufacturerAddress.District =\r\n        manufacturerInfo.value.selectedDistrict.Loci_Code_Area_L1;\r\n      // validateInput(\"Country\");\r\n      // await fetchState();\r\n    } else {\r\n      // Clear Country, State, District, Mandal, Postal Code\r\n      Global_Manufacturer_Definition.value.manufacturerAddress.District = null;\r\n      sendSocketReq({\r\n        data: {\r\n          Expiry: 20000,\r\n          Type: \"REQUEST\",\r\n          Request: {\r\n            Module: \"GLOBAL\",\r\n            ServiceCode: \"GLOBL\",\r\n            API: \"GET_GEO_LIST\",\r\n            Max_List: 500,\r\n            Criteria: {\r\n              Type_Code: \"ARL1\",\r\n              Loci_Code_Country:\r\n                Global_Manufacturer_Definition.value.manufacturerAddress\r\n                  .Country,\r\n              Loci_Code_State:\r\n                Global_Manufacturer_Definition.value.manufacturerAddress.State,\r\n              Loci_Name_District: \"\",\r\n            },\r\n          },\r\n        },\r\n        callback: (res) => {\r\n          if (res.Type === \"RESPONSE\") {\r\n            console.log(\"Response Packet -->\", res.Response);\r\n            districtList.value = res.Response.ARL1_List; //Assigning response values to getValues Object\r\n          } else if (res.Type === \"ERROR\") {\r\n            // Error response received during fetching\r\n            Type: \"ERROR\";\r\n            Response: {\r\n              Error_Code: \"API-GET_GEO_LIST-E001\";\r\n              Error_Msg: \"GET_GEO_LIST_API: Failed to execute query\";\r\n            }\r\n          }\r\n        },\r\n      });\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\nonMounted(() => {\r\n  fetchCountry();\r\n});\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n@import \"../Style/BIOMD.scss\";\r\n</style>\r\n","import script from \"./MANUFACTURER-ManufacturerInformation.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./MANUFACTURER-ManufacturerInformation.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./MANUFACTURER-ManufacturerInformation.vue?vue&type=style&index=0&id=a73355e0&lang=scss&scoped=true\"\n\nimport exportComponent from \"/mnt/d/Dev/MEMS/src/client/web/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-a73355e0\"]])\n\nexport default __exports__","<!-- \r\n************************************\r\nCreated By : Reveal Foundation  \r\nAuthor     : Edward Opoku-Agyemang           \r\nDate       : 03-Sep-2022\r\nVersion    : 0.0.2   \r\nDescription: Describe the application\r\n************************************\r\n-->\r\n\r\n<template>\r\n  <div class=\"RevealContainer\">\r\n    <div class=\"container p-4 m-4\">\r\n      <!-- Welcome Variable Rendering with Mustatsh syntax. Variable is databinded -->\r\n      <div\r\n        class=\"d-lg-flex d-md-flex d-sm-flex gap-lg-0 gap-sm-5 align-items-center justify-content-lg-between justify-content-md-between justify-content-sm-center\"\r\n      >\r\n        <div class=\"mt-3\">\r\n          <Header\r\n            title=\"New Manufacturer\"\r\n            subTitle=\"Create new manufacturer with this form\"\r\n          />\r\n        </div>\r\n        <div class=\"d-flex gap-2 d-md-block\">\r\n          <Btn2\r\n            BtnName=\"Return\"\r\n            :icon=\"'arrow-left'\"\r\n            backgroundColor=\"none\"\r\n            @click=\"goBack\"\r\n            class=\"text-secondary btn-sm\"\r\n          />\r\n\r\n          <Btn2\r\n            BtnName=\"Dashboard\"\r\n            backgroundColor=\"#2A94B6\"\r\n            @click=\"goBack\"\r\n            class=\"text-light btn-sm\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <main>\r\n        <ManufacturerInformation />\r\n\r\n        <div class=\"d-flex justify-content-center py-3\">\r\n          <!-- btn-green and a-link are custom css for MEMS check base.css -->\r\n          <div class=\"\">\r\n            <Btn\r\n              BtnName=\"Create Manufacturer\"\r\n              backgroundColor=\"#27AE60\"\r\n              class=\"mb-3\"\r\n              @click=\"createRecord()\"\r\n            />\r\n\r\n            <Btn BtnName=\"Clear Content\" />\r\n          </div>\r\n        </div>\r\n      </main>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { useStore } from \"vuex\";\r\nimport { ref, toRefs, provide, computed } from \"vue\";\r\n\r\nimport ManufacturerInformation from \"./MANUFACTURER-ManufacturerInformation.vue\";\r\nimport Btn from \"../BIOMD-UI/UI-Btn.vue\";\r\nimport Btn2 from \"../BIOMD-UI/UI-Btn2.vue\";\r\nimport Header from \"../BIOMD-UI/UI-FormHeader.vue\";\r\n\r\nexport default {\r\n  name: \"manufacturer\",\r\n  // Define Props here\r\n  props: {\r\n    tabid: {\r\n      type: String,\r\n    },\r\n  },\r\n  // Emit value can pass within this array\r\n  emits: [\"updatePage\"],\r\n  setup(props, { emit }) {\r\n    const { props_variable } = toRefs(props); // include variables from the props with help of toRefs\r\n    const store = useStore();\r\n    const Institute_Code = computed(\r\n      () => store.state.globalStore.UserInfo.Institute_Info.Code\r\n    );\r\n\r\n    const manufacturerInfo = ref({\r\n      manufacturerName: null,\r\n      selectedCountry: { Loci_Name_Country: null, Loci_Code_Country: null },\r\n      selectedState: { Loci_Name_State: null, Loci_Code_State: null },\r\n      selectedDistrict: {\r\n        Loci_Name_Area_L1: null,\r\n        Loci_Code_Area_L1: null,\r\n      },\r\n      streetAddress1: null,\r\n      streetAddress2: null,\r\n      zipCode: null,\r\n    });\r\n\r\n    const Global_Manufacturer_Definition = ref({\r\n      manufacturerAddress: {\r\n        Country: null,\r\n        State: null,\r\n        District: null,\r\n      },\r\n    });\r\n\r\n    const changeServiceState = (serviceState) =>\r\n      store.dispatch(\"changeServiceState\", serviceState);\r\n    //Redirect to another page\r\n    function redirectToPage() {\r\n      changeServiceState({\r\n        service: \"<App_Name>\",\r\n        tabcode: tabid.value,\r\n        status: \"<Navigate_To_This_Page>\",\r\n      });\r\n    }\r\n    // send Socket Request use to send rrequest packet for an API\r\n    const sendSocketReq = (request) => {\r\n      store.dispatch(\"sendSocketReq\", request);\r\n    };\r\n\r\n    // Function to Send Request and Get Response by this template code .\r\n    function createRecord() {\r\n      // send Request as below .\r\n      sendSocketReq({\r\n        data: {\r\n          Expiry: 20000,\r\n          Type: \"REQUEST\",\r\n          Request: {\r\n            Module: \"MEMS\",\r\n            ServiceCode: \"BIOMD\",\r\n            API: \"CREATE_RECORD\",\r\n            collection: \"Manufacturer\",\r\n            record: {\r\n              manufacturer_name: manufacturerInfo.value.manufacturerName,\r\n              country:\r\n                Global_Manufacturer_Definition.value.manufacturerAddress\r\n                  .Country,\r\n              area: Global_Manufacturer_Definition.value.manufacturerAddress\r\n                .State,\r\n              city: Global_Manufacturer_Definition.value.manufacturerAddress\r\n                .District,\r\n              address_1: manufacturerInfo.value.streetAddress1,\r\n              address_2: manufacturerInfo.value.streetAddress2,\r\n              area_code: manufacturerInfo.value.zipCode,\r\n            },\r\n            Institute_Code: Institute_Code.value, //Dynamically changes when another institute logged in\r\n          },\r\n        },\r\n        callback: (res) => {\r\n          if (res.Type === \"RESPONSE\") {\r\n            // Console the Response Packet\r\n            Type: \"RESPONSE\";\r\n            Response: {\r\n              // ID:\r\n              Success: TRUE;\r\n              Collection: \"manufacturers\";\r\n              Message: \"Created Record\";\r\n            }\r\n\r\n            console.log(\"Response Packet -->\", res.Response);\r\n            getValues.value = res.Response.Site_Info[0]; //Assigning response values to getValues Object\r\n          } else if (res.Type === \"ERROR\") {\r\n            // Error response received during fetching\r\n            Type: \"ERROR\";\r\n            Response: {\r\n              Error_Code: \"API-CREATE_RECORD-E001\";\r\n              Error_Msg: \"CREATE_RECORD_API: Failed to execute query\";\r\n            }\r\n          }\r\n        },\r\n      });\r\n    }\r\n\r\n    const goBack = () => {\r\n      emit(\"updatePage\", \"landing\");\r\n    };\r\n\r\n    provide(\"manufacturerInfo\", manufacturerInfo);\r\n    provide(\"Global_Manufacturer_Definition\", Global_Manufacturer_Definition);\r\n\r\n    return {\r\n      goBack,\r\n      redirectToPage,\r\n      createRecord,\r\n    };\r\n  },\r\n  components: { ManufacturerInformation, Btn2, Btn, Header },\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.RevealContainer {\r\n  min-height: 100vh;\r\n  max-height: 100vh;\r\n  overflow: scroll;\r\n}\r\n\r\n.RevealContainer::-webkit-scrollbar {\r\n  display: none;\r\n}\r\n</style>\r\n","import { render } from \"./MANUFACTURER.vue?vue&type=template&id=a6567fd8&scoped=true\"\nimport script from \"./MANUFACTURER.vue?vue&type=script&lang=js\"\nexport * from \"./MANUFACTURER.vue?vue&type=script&lang=js\"\n\nimport \"./MANUFACTURER.vue?vue&type=style&index=0&id=a6567fd8&lang=scss&scoped=true\"\n\nimport exportComponent from \"/mnt/d/Dev/MEMS/src/client/web/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-a6567fd8\"]])\n\nexport default __exports__"],"names":["store","useStore","manufacturerInfo","inject","Global_Manufacturer_Definition","countryList","ref","stateList","districtList","sendSocketReq","request","dispatch","fetchCountry","async","selectedCountry","event","target","value","InputEvent","inputType","manufacturerAddress","Country","State","selectedState","Loci_Name_Country","Loci_Code_Country","District","selectedDistrict","Loci_Name_Area_L1","Loci_Code_Area_L1","data","Expiry","Type","Request","Module","ServiceCode","API","Max_List","Criteria","Type_Code","callback","res","console","log","Response","Country_List","find","country","fetchState","error","Loci_Name_State","State_List","state","Loci_Code_State","fetchDistrict","Loci_Name_District","ARL1_List","onMounted","__exports__","class","_createElementBlock","_createElementVNode","_createVNode","_component_Header","title","subTitle","_component_Btn2","BtnName","icon","backgroundColor","onClick","$setup","_component_ManufacturerInformation","_component_Btn","name","props","tabid","type","String","emits","setup","emit","props_variable","toRefs","Institute_Code","computed","globalStore","UserInfo","Institute_Info","Code","manufacturerName","streetAddress1","streetAddress2","zipCode","changeServiceState","serviceState","redirectToPage","service","tabcode","status","createRecord","collection","record","manufacturer_name","area","city","address_1","address_2","area_code","TRUE","getValues","Site_Info","goBack","provide","components","ManufacturerInformation","Btn2","Btn","Header","render"],"sourceRoot":""}