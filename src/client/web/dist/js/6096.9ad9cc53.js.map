{"version":3,"file":"js/6096.9ad9cc53.js","mappings":"w0EAmMMA,GAAQC,EAAAA,EAAAA,MAERC,EAAiBC,IACrBH,EAAMI,SAAS,gBAAiBD,IAI5BE,GAAYC,EAAAA,EAAAA,IAAI,IAChBC,GAAmBD,EAAAA,EAAAA,IAAI,IACvBE,IAAaF,EAAAA,EAAAA,IAAI,IAKjBG,GAAaC,UACjB,IACER,EAAc,CACZS,KAAM,CACJC,OAAQ,IACRC,KAAM,UACNC,QAAS,CACPC,OAAQ,OACRC,YAAa,QACbC,IAAK,cACLC,cAAc,EACdC,SAAU,IACVC,KAAM,CACJC,WAAY,QACZC,QAAS,CACP,CACEC,WAAY,iBACZF,WAAY,eACZG,aAAc,MACdC,GAAI,iBAGRC,WAAY,CACVC,IAAK,EACLC,iBAAkB,iCAClBC,UAAW,EACXC,WAAY,EACZC,UAAW,MAKnBC,SAAWC,IACQ,aAAbA,EAAIpB,MACNqB,QAAQC,IAAI,yBAAuBF,EAAIG,UACvC/B,EAAUgC,MAAQJ,EAAIG,SAASE,SACtBL,EAAIpB,QASnB,MAAO0B,GACPL,QAAQC,IAAII,KAIVC,GAAoB9B,UACxB,IACER,EAAc,CACZS,KAAM,CACJC,OAAQ,IACRC,KAAM,UACNC,QAAS,CACPC,OAAQ,OACRC,YAAa,QACbC,IAAK,cACLC,cAAc,EACdC,SAAU,IACVC,KAAM,CACJC,WAAY,eACZK,WAAY,CACVC,IAAK,EACLC,iBAAkB,MAK1BI,SAAWC,IACQ,aAAbA,EAAIpB,MACNqB,QAAQC,IAAI,yBAAuBF,EAAIG,UACvC7B,EAAiB8B,MAAQJ,EAAIG,SAASE,SAC7BL,EAAIpB,QASnB,MAAO0B,GACPL,QAAQC,IAAII,KAIVE,GAAc/B,UAClB,IACER,EAAc,CACZS,KAAM,CACJC,OAAQ,IACRC,KAAM,UACNC,QAAS,CACPC,OAAQ,OACRC,YAAa,QACbC,IAAK,cACLC,cAAc,EACdC,SAAU,IACVC,KAAM,CACJC,WAAY,SACZC,QAAS,CACP,CACEC,WAAY,gCACZF,WAAY,eACZG,aAAc,MACdC,GAAI,iBAGRC,WAAY,CACVC,IAAK,EACLC,iBAAkB,iCAClBc,WAAY,EACZC,aAAc,qCAKtBX,SAAWC,IACQ,aAAbA,EAAIpB,MACNqB,QAAQC,IAAI,yBAAuBF,EAAIG,UACvC5B,GAAW6B,MAAQJ,EAAIG,SAASE,SACvBL,EAAIpB,QASnB,MAAO0B,GACPL,QAAQC,IAAII,KAcVK,GAAalC,MAAOmC,EAAMC,KAC9BC,EAAK,aAAcF,EAAMC,I,OAG3BE,EAAAA,EAAAA,KAAU,KACRvC,KACA+B,KACAC,Q,8/DCzWF,MAAMQ,EAAc,EAEpB,S,2VC8BA,IAAIC,EAAOJ,EAAMI,K,gZC7BjB,MAAMD,GAA2B,OAAgB,EAAQ,CAAC,CAAC,YAAY,qBAEvE","sources":["webpack://mems-client/./src/components/BIOMD/BIOMD/BIOMD-DASHBOARD/DASHBOARD-ManufacturerProfile.vue","webpack://mems-client/./src/components/BIOMD/BIOMD/BIOMD-DASHBOARD/DASHBOARD-ManufacturerProfile.vue?80a4","webpack://mems-client/./src/components/BIOMD/BIOMD/BIOMD-UI/UI-Btn2.vue","webpack://mems-client/./src/components/BIOMD/BIOMD/BIOMD-UI/UI-Btn2.vue?1ca1"],"sourcesContent":["<template>\r\n  <div class=\"container-fluid\">\r\n    <nav class=\"d-flex gap-3 p-2\">\r\n      <small\r\n        class=\"text-secondary\"\r\n        style=\"cursor: pointer\"\r\n        @click=\"changePage('dashboard')\"\r\n        >Back</small\r\n      >\r\n    </nav>\r\n\r\n    <div class=\"d-flex flex-column p-2 mt-4\">\r\n      <div>\r\n        <span class=\"title text-dark fw-normal fs-1\">{{\r\n          props.manufacturerName\r\n        }}</span>\r\n      </div>\r\n      <div>\r\n        <span class=\"fsXs\">\r\n          Manufacturer Profile or Model Details can be edited by selecting the\r\n          Vendor\r\n        </span>\r\n      </div>\r\n    </div>\r\n    <div class=\"row p-2 mt-4 mb-5\">\r\n      <div class=\"col-md-6\">\r\n        <div class=\"mb-5\">\r\n          <div class=\"\">\r\n            <span class=\"card-title fw-normal fs-5\">Manufacturer Profile</span>\r\n            <!-- <p class=\"card-text\">\r\n              <small class=\"text-muted fsXs\"\r\n                >Detailed equipment description</small\r\n              >\r\n            </p> -->\r\n          </div>\r\n          <div\r\n            class=\"g-3 mb-2 mt-2 rounded-3 container py-2 align-middle\"\r\n            style=\"background-color: #f5f6f6\"\r\n          >\r\n            <div class=\"d-flex flex-column gap-3\">\r\n              <td>\r\n                <div class=\"d-flex flex-column\">\r\n                  <small class=\"text-secondary fsXs\">ID</small>\r\n                  <small class=\"fw-normal\">{{ props.manufacturerID }}</small>\r\n                </div>\r\n              </td>\r\n\r\n              <td>\r\n                <div class=\"d-flex flex-column\">\r\n                  <small class=\"text-secondary fsXs\">Name</small>\r\n                  <small>{{ props.manufacturerName }} </small>\r\n                </div>\r\n              </td>\r\n              <td>\r\n                <div class=\"d-flex flex-column\">\r\n                  <small class=\"text-secondary fsXs\">Vendor List</small>\r\n\r\n                  <span v-for=\"vendor in vendorList\" :key=\"vendor.index\">\r\n                    <small\r\n                      v-if=\"vendor.manufacturerName === props.manufacturerName\"\r\n                      >{{ vendor.vendorName }}</small\r\n                    >\r\n                    <!-- <small v-else class=\"text-muted\">No Vendor Assigned</small> -->\r\n                  </span>\r\n                </div>\r\n              </td>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"mb-5\">\r\n          <div class=\"\">\r\n            <span class=\"card-title fw-normal fs-5\">Models</span>\r\n            <!-- <p class=\"card-text\">\r\n              <small class=\"text-muted fsXs\"\r\n                >Detailed equipment description</small\r\n              >\r\n            </p> -->\r\n          </div>\r\n          <div v-for=\"model in modelList\" :key=\"model.index\">\r\n            <div\r\n              v-if=\"model.manufacturerName === props.manufacturerName\"\r\n              class=\"g-3 mb-2 mt-2 rounded-3 container py-2 align-middle\"\r\n              style=\"background-color: #f5f6f6\"\r\n            >\r\n              <div class=\"d-flex flex-column gap-3\">\r\n                <td>\r\n                  <div class=\"d-flex flex-column\">\r\n                    <small class=\"text-secondary fsXs\">Name</small>\r\n                    <small class=\"fw-normal\">{{ model.modelName }}</small>\r\n                  </div>\r\n                </td>\r\n\r\n                <td>\r\n                  <div class=\"d-flex flex-column\">\r\n                    <small class=\"text-secondary fsXs\">Code</small>\r\n                    <small>{{ model.UMDNSCode }} </small>\r\n                  </div>\r\n                </td>\r\n                <!-- <td>\r\n                  <div class=\"d-flex flex-column\">\r\n                    <small class=\"text-secondary fsXs\"\r\n                      >Device Description</small\r\n                    >\r\n                    <small>All Vendors</small>\r\n                  </div>\r\n                </td> -->\r\n                <td>\r\n                  <div class=\"d-flex flex-column\">\r\n                    <small class=\"text-secondary fsXs\">Common Name</small>\r\n                    <small>{{ model.commonName }}</small>\r\n                  </div>\r\n                </td>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"col-md-6\">\r\n        <div class=\"mb-5\">\r\n          <div class=\"\">\r\n            <span class=\"card-title fw-normal fs-5\">Vendor Description</span>\r\n            <!-- <p class=\"card-text\">\r\n              <small class=\"text-muted fsXs\"\r\n                >Detailed equipment description</small\r\n              >\r\n            </p> -->\r\n          </div>\r\n          <div>\r\n            <div v-for=\"vendor in vendorList\" :key=\"vendor.index\">\r\n              <div\r\n                v-if=\"vendor.manufacturerName === props.manufacturerName\"\r\n                class=\"g-3 mb-2 mt-2 rounded-3 container py-2 align-middle\"\r\n                style=\"background-color: #f5f6f6\"\r\n              >\r\n                <div class=\"d-flex flex-column gap-3\">\r\n                  <!-- <td>\r\n                    <div class=\"d-flex flex-column\">\r\n                      <small class=\"text-secondary fsXs\">ID</small>\r\n                      <small class=\"fw-normal\">{{ props.vendorID }}</small>\r\n                    </div>\r\n                  </td> -->\r\n\r\n                  <td>\r\n                    <div class=\"d-flex flex-column\">\r\n                      <small class=\"text-secondary fsXs\">Name</small>\r\n                      <small>{{ vendor.vendorName }} </small>\r\n                    </div>\r\n                  </td>\r\n                  <td>\r\n                    <div class=\"d-flex flex-column\">\r\n                      <small class=\"text-secondary fsXs\"\r\n                        >Manufacturer List</small\r\n                      >\r\n                      <span>\r\n                        <small v-if=\"vendor.manufacturerName\">{{\r\n                          vendor.manufacturerName\r\n                        }}</small>\r\n                        <small v-else class=\"text-muted\"\r\n                          >No Manufacturer Assigned</small\r\n                        >\r\n                      </span>\r\n                    </div>\r\n                  </td>\r\n                  <div class=\"d-flex gap-2 d-md-block\">\r\n                    <Btn2\r\n                      BtnName=\"EDIT\"\r\n                      backgroundColor=\"gray\"\r\n                      @click=\"editPage\"\r\n                      class=\"text-light btn-sm rounded-pill\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <!-- <div\r\n                v-if=\"vendorList.manufacturerName !== props.manufacturerName\"\r\n                class=\"g-3 mb-2 mt-2 rounded-3 container py-2 align-middle\"\r\n                style=\"background-color: #f5f6f6\"\r\n              >\r\n                <small class=\"text-secondary\"\r\n                  >Vendor Description Unavailable</small\r\n                >\r\n              </div> -->\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted } from \"vue\";\r\nimport { useStore } from \"vuex\";\r\nimport Btn2 from \"../BIOMD-UI/UI-Btn2.vue\";\r\n\r\nconst store = useStore();\r\n\r\nconst sendSocketReq = (request) => {\r\n  store.dispatch(\"sendSocketReq\", request);\r\n};\r\n\r\n//Variables\r\nconst modelList = ref([]);\r\nconst manufacturerList = ref([]);\r\nconst vendorList = ref([]);\r\n\r\n//Functions\r\n\r\n//Fetch Model Information\r\nconst fetchModel = async () => {\r\n  try {\r\n    sendSocketReq({\r\n      data: {\r\n        Expiry: 20000,\r\n        Type: \"REQUEST\",\r\n        Request: {\r\n          Module: \"MEMS\",\r\n          ServiceCode: \"BIOMD\",\r\n          API: \"FIND_RECORD\",\r\n          return_array: true,\r\n          max_list: 100,\r\n          find: {\r\n            collection: \"Model\",\r\n            lookups: [\r\n              {\r\n                localField: \"manufacturerID\",\r\n                collection: \"Manufacturer\",\r\n                foreignField: \"_id\",\r\n                as: \"Manufacturer\",\r\n              },\r\n            ],\r\n            projection: {\r\n              _id: 1,\r\n              manufacturerName: \"$Manufacturer.manufacturerName\",\r\n              modelName: 1,\r\n              commonName: 1,\r\n              UMDNSCode: 1,\r\n            },\r\n          },\r\n        },\r\n      },\r\n      callback: (res) => {\r\n        if (res.Type === \"RESPONSE\") {\r\n          console.log(\"Response Packet -->\", res.Response);\r\n          modelList.value = res.Response.records;\r\n        } else if (res.Type === \"ERROR\") {\r\n          Type: \"ERROR\";\r\n          Response: {\r\n            Error_Code: \"API-CREATE_RECORD-E001\";\r\n            Error_Msg: \"CREATE_RECORD_API: Failed to execute query\";\r\n          }\r\n        }\r\n      },\r\n    });\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n//Fetch Manufacturer Information\r\nconst fetchManufacturer = async () => {\r\n  try {\r\n    sendSocketReq({\r\n      data: {\r\n        Expiry: 20000,\r\n        Type: \"REQUEST\",\r\n        Request: {\r\n          Module: \"MEMS\",\r\n          ServiceCode: \"BIOMD\",\r\n          API: \"FIND_RECORD\",\r\n          return_array: true,\r\n          max_list: 100,\r\n          find: {\r\n            collection: \"Manufacturer\",\r\n            projection: {\r\n              _id: 1,\r\n              manufacturerName: 1,\r\n            },\r\n          },\r\n        },\r\n      },\r\n      callback: (res) => {\r\n        if (res.Type === \"RESPONSE\") {\r\n          console.log(\"Response Packet -->\", res.Response);\r\n          manufacturerList.value = res.Response.records;\r\n        } else if (res.Type === \"ERROR\") {\r\n          Type: \"ERROR\";\r\n          Response: {\r\n            Error_Code: \"API-CREATE_RECORD-E001\";\r\n            Error_Msg: \"CREATE_RECORD_API: Failed to execute query\";\r\n          }\r\n        }\r\n      },\r\n    });\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n// Fetch Vendor Information\r\nconst fetchVendor = async () => {\r\n  try {\r\n    sendSocketReq({\r\n      data: {\r\n        Expiry: 20000,\r\n        Type: \"REQUEST\",\r\n        Request: {\r\n          Module: \"MEMS\",\r\n          ServiceCode: \"BIOMD\",\r\n          API: \"FIND_RECORD\",\r\n          return_array: true,\r\n          max_list: 100,\r\n          find: {\r\n            collection: \"Vendor\",\r\n            lookups: [\r\n              {\r\n                localField: \"manufacturerList.manufacturer\",\r\n                collection: \"Manufacturer\",\r\n                foreignField: \"_id\",\r\n                as: \"Manufacturer\",\r\n              },\r\n            ],\r\n            projection: {\r\n              _id: 1,\r\n              manufacturerName: \"$Manufacturer.manufacturerName\",\r\n              vendorName: 1,\r\n              manufacturer: \"$Manufacturer.manufacturerName\",\r\n            },\r\n          },\r\n        },\r\n      },\r\n      callback: (res) => {\r\n        if (res.Type === \"RESPONSE\") {\r\n          console.log(\"Response Packet -->\", res.Response);\r\n          vendorList.value = res.Response.records;\r\n        } else if (res.Type === \"ERROR\") {\r\n          Type: \"ERROR\";\r\n          Response: {\r\n            Error_Code: \"API-CREATE_RECORD-E001\";\r\n            Error_Msg: \"CREATE_RECORD_API: Failed to execute query\";\r\n          }\r\n        }\r\n      },\r\n    });\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nconst props = defineProps([\r\n  \"manufacturerName\",\r\n  \"manufacturerID\",\r\n  \"vendorName\",\r\n  \"manufacturer\",\r\n  \"vendorID\",\r\n]);\r\n\r\nconst emit = defineEmits([\"updatePage\"]);\r\n\r\nconst changePage = async (page, props) => {\r\n  emit(\"updatePage\", page, props);\r\n};\r\n\r\nonMounted(() => {\r\n  fetchModel();\r\n  fetchManufacturer();\r\n  fetchVendor();\r\n});\r\n</script>\r\n\r\n<style lang=\"scss\" scoped></style>\r\n","import script from \"./DASHBOARD-ManufacturerProfile.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./DASHBOARD-ManufacturerProfile.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\r\n  <button\r\n    type=\"button\"\r\n    class=\"btn buttonBackground d-inline-flex align-items-center fs-6 rounded\"\r\n    :class=\"class\"\r\n    :style=\"'--color:' + backgroundColor\"\r\n  >\r\n    <font-awesome-icon :icon=\"icon\" size=\"1x\" class=\"me-2\" />\r\n    <span class=\"fsXs\">{{ BtnName }}</span>\r\n\r\n    <slot />\r\n  </button>\r\n</template>\r\n\r\n<script setup>\r\nconst props = defineProps({\r\n  BtnName: {\r\n    type: String,\r\n    default: \"Button Name\",\r\n  },\r\n  class: {\r\n    type: String,\r\n    default: \"\",\r\n  },\r\n  showLoader: {\r\n    type: Boolean,\r\n    default: false,\r\n  },\r\n  backgroundColor: {\r\n    type: String,\r\n    default: \"#586974\",\r\n  },\r\n  icon: null,\r\n});\r\n\r\nlet icon = props.icon;\r\n\r\nconst emit = defineEmits([\"\"]);\r\n\r\nfunction emitClickEvent() {\r\n  emit(\"\");\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n@import \"../Style/font-style.scss\";\r\n.buttonBackground {\r\n  background-color: var(--color);\r\n}\r\n\r\nbutton:focus {\r\n  outline: none;\r\n  box-shadow: none;\r\n}\r\n</style>\r\n","import script from \"./UI-Btn2.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./UI-Btn2.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./UI-Btn2.vue?vue&type=style&index=0&id=1a26e9bf&lang=scss&scoped=true\"\n\nimport exportComponent from \"/mnt/d/Dev/MEMS/src/client/web/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-1a26e9bf\"]])\n\nexport default __exports__"],"names":["store","useStore","sendSocketReq","request","dispatch","modelList","ref","manufacturerList","vendorList","fetchModel","async","data","Expiry","Type","Request","Module","ServiceCode","API","return_array","max_list","find","collection","lookups","localField","foreignField","as","projection","_id","manufacturerName","modelName","commonName","UMDNSCode","callback","res","console","log","Response","value","records","error","fetchManufacturer","fetchVendor","vendorName","manufacturer","changePage","page","props","emit","onMounted","__exports__","icon"],"sourceRoot":""}