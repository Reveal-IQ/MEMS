{"version":3,"file":"js/5674.172d2faa.js","mappings":"moBAoEA,MAAMA,GAAQC,EAAAA,EAAAA,MACRC,EAAiBC,IACrBH,EAAMI,SAAS,gBAAiBD,IAG5BE,GAAeC,EAAAA,EAAAA,IAAI,MACnBC,GAAiBD,EAAAA,EAAAA,IAAI,MAErBE,GAAgBC,EAAAA,EAAAA,IAAO,iBACvBC,GAAyBD,EAAAA,EAAAA,IAAO,0BAEhCE,EAAgBC,MAAAA,IACpB,IACE,MAAMC,EAAmBC,EAAQA,EAAMC,OAAOC,MAAQ,IAEpDF,GACGA,aAAiBG,YACE,0BAApBH,EAAMI,WAWRR,EAAuBM,MAAMG,WAAa,KAE1CjB,EAAc,CACZkB,KAAM,CACJC,OAAQ,IACRC,KAAM,UACNC,QAAS,CACPC,OAAQ,OACRC,YAAa,QACbC,IAAK,cACLC,cAAc,EACdC,SAAU,IACVC,KAAM,CACJC,WAAY,WACZC,QAAS,CACP,CACEC,MAAO,eACPC,GAAI,KACJjB,MAAO,MAGXkB,WAAY,CACVC,IAAK,EACLC,aAAc,MAKtBC,SAAWC,IACQ,aAAbA,EAAIhB,MAENiB,QAAQC,IAAI,yBAAuBF,EAAIG,UACvCpC,EAAaW,MAAQsB,EAAIG,SAASC,SACzBJ,EAAIhB,UA1CnBd,EAAcQ,MAAMH,iBAAmBR,EAAaW,MAAMa,MACvDc,GACQ9B,IAAqB8B,EAASP,eAGzC1B,EAAuBM,MAAMG,WAC3BX,EAAcQ,MAAMH,iBAAiBsB,UACjCS,KA8CR,MAAOC,GACPN,QAAQC,IAAIK,KAIVD,EAAkBhC,MAAAA,IACtB,IACE,MAAMkC,EAAqBhC,EAAQA,EAAMC,OAAOC,MAAQ,IAEtDF,GACGA,aAAiBG,YACE,0BAApBH,EAAMI,WAURR,EAAuBM,MAAM+B,aAAe,KAE5C7C,EAAc,CACZkB,KAAM,CACJC,OAAQ,IACRC,KAAM,UACNC,QAAS,CACPC,OAAQ,OACRC,YAAa,QACbC,IAAK,cACLC,cAAc,EACdC,SAAU,IACVC,KAAM,CACJC,WAAY,aACZC,QAAS,CACP,CACEC,MAAO,aACPC,GAAI,KACJjB,MAAON,EAAuBM,MAAMG,aAGxCe,WAAY,CACVC,IAAK,EACLhB,WAAY,EACZ6B,eAAgB,EAChBC,UAAW,MAKnBZ,SAAWC,IACQ,aAAbA,EAAIhB,MAENiB,QAAQC,IAAI,yBAAuBF,EAAIG,UACvClC,EAAeS,MAAQsB,EAAIG,SAASC,SAC3BJ,EAAIhB,UA3CnBd,EAAcQ,MAAM8B,mBAAqBvC,EAAeS,MAAMa,MAC3DqB,GACQJ,IAAuBI,EAAWF,iBAG7CtC,EAAuBM,MAAM+B,aAC3BvC,EAAcQ,MAAM8B,mBAAmBG,WAgD3C,MAAOJ,GACPN,QAAQC,IAAIK,K,OAIhBM,EAAAA,EAAAA,KAAU,KACRxC,O,s8CC/MF,MAAMyC,GAA2B,OAAgB,EAAQ,CAAC,CAAC,YAAY,qBAEvE,S,4vBCLA,MAAMA,EAAc,EAEpB,S,+XCCA,MAAMA,GAA2B,OAAgB,EAAQ,CAAC,CAAC,YAAY,qBAEvE","sources":["webpack://mems-client/./src/components/BIOMD/BIOMD/BIOMD-ASSET/ASSET-AssetLocation.vue","webpack://mems-client/./src/components/BIOMD/BIOMD/BIOMD-ASSET/ASSET-AssetLocation.vue?ade0","webpack://mems-client/./src/components/BIOMD/BIOMD/BIOMD-UI/UI-Input.vue","webpack://mems-client/./src/components/BIOMD/BIOMD/BIOMD-UI/UI-Section.vue"],"sourcesContent":["<template>\r\n  <Section sectionTitle=\"Asset Location\">\r\n    <!-- Facility -->\r\n    <div class=\"col-lg-6 mb-3\">\r\n      <label for=\"facilityList\" class=\"form-label\">Facility</label>\r\n      <input\r\n        class=\"form-control\"\r\n        list=\"facilityListOptions\"\r\n        id=\"facilityList\"\r\n        placeholder=\"Select facility\"\r\n        aria-label=\"Default select example\"\r\n        v-model=\"AssetLocation.selectedFacility.facilityName\"\r\n        @input=\"fetchFacility\"\r\n        autocomplete=\"off\"\r\n      />\r\n      <datalist id=\"facilityListOptions\">\r\n        <option\r\n          v-for=\"facility in facilityList\"\r\n          :key=\"facility.index\"\r\n          :value=\"facility.facilityName\"\r\n        ></option>\r\n      </datalist>\r\n    </div>\r\n\r\n    <!-- Department -->\r\n    <div class=\"col-lg-6 mb-3\">\r\n      <label for=\"departmentList\" class=\"form-label\">Department</label>\r\n      <input\r\n        class=\"form-control\"\r\n        list=\"departmentListOptions\"\r\n        id=\"departmentList\"\r\n        placeholder=\"Select department\"\r\n        aria-label=\"Default select example\"\r\n        v-model=\"AssetLocation.selectedDepartment.departmentName\"\r\n        @input=\"fetchDepartment\"\r\n        autocomplete=\"off\"\r\n      />\r\n      <datalist id=\"departmentListOptions\">\r\n        <option\r\n          v-for=\"department in departmentList\"\r\n          :key=\"department.index\"\r\n          :value=\"department.departmentName\"\r\n        ></option>\r\n      </datalist>\r\n    </div>\r\n\r\n    <!-- Location -->\r\n    <div class=\"col-lg-6 mb-3\">\r\n      <Input\r\n        class=\"form-control\"\r\n        id=\"locationName\"\r\n        label=\"Location\"\r\n        placeholder=\"Enter Location\"\r\n        aria-label=\"Default select example\"\r\n        v-model=\"AssetLocation.locationName\"\r\n        autocomplete=\"off\"\r\n      />\r\n    </div>\r\n  </Section>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, inject, onMounted } from \"vue\";\r\nimport { useStore } from \"vuex\";\r\n\r\nimport Section from \"../BIOMD-UI/UI-Section.vue\";\r\nimport Input from \"../BIOMD-UI/UI-Input.vue\";\r\n\r\nconst store = useStore();\r\nconst sendSocketReq = (request) => {\r\n  store.dispatch(\"sendSocketReq\", request);\r\n};\r\n\r\nconst facilityList = ref(null);\r\nconst departmentList = ref(null);\r\n\r\nconst AssetLocation = inject(\"AssetLocation\");\r\nconst GlobalAssetInformation = inject(\"GlobalAssetInformation\");\r\n\r\nconst fetchFacility = async (event) => {\r\n  try {\r\n    const selectedFacility = event ? event.target.value : \"\";\r\n    if (\r\n      event &&\r\n      (!(event instanceof InputEvent) ||\r\n        event.inputType === \"insertReplacementText\")\r\n    ) {\r\n      AssetLocation.value.selectedFacility = facilityList.value.find(\r\n        (facility) => {\r\n          return selectedFacility === facility.facilityName;\r\n        }\r\n      );\r\n      GlobalAssetInformation.value.facilityID =\r\n        AssetLocation.value.selectedFacility._id;\r\n      await fetchDepartment();\r\n    } else {\r\n      GlobalAssetInformation.value.facilityID = null;\r\n\r\n      sendSocketReq({\r\n        data: {\r\n          Expiry: 20000,\r\n          Type: \"REQUEST\",\r\n          Request: {\r\n            Module: \"MEMS\",\r\n            ServiceCode: \"BIOMD\",\r\n            API: \"FIND_RECORD\",\r\n            return_array: true,\r\n            max_list: 100,\r\n            find: {\r\n              collection: \"Facility\",\r\n              queries: [\r\n                {\r\n                  field: \"facilityName\",\r\n                  op: \"sb\",\r\n                  value: \"^\",\r\n                },\r\n              ],\r\n              projection: {\r\n                _id: 1,\r\n                facilityName: 1,\r\n              },\r\n            },\r\n          },\r\n        },\r\n        callback: (res) => {\r\n          if (res.Type === \"RESPONSE\") {\r\n            // Console the Response Packet\r\n            console.log(\"Response Packet -->\", res.Response);\r\n            facilityList.value = res.Response.records;\r\n          } else if (res.Type === \"ERROR\") {\r\n            // Error response received during fetching\r\n            Type: \"ERROR\";\r\n            Response: {\r\n              Error_Code: \"API-CREATE_RECORD-E001\";\r\n              Error_Msg: \"CREATE_RECORD_API: Failed to execute query\";\r\n            }\r\n          }\r\n        },\r\n      });\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nconst fetchDepartment = async (event) => {\r\n  try {\r\n    const selectedDepartment = event ? event.target.value : \"\";\r\n    if (\r\n      event &&\r\n      (!(event instanceof InputEvent) ||\r\n        event.inputType === \"insertReplacementText\")\r\n    ) {\r\n      AssetLocation.value.selectedDepartment = departmentList.value.find(\r\n        (department) => {\r\n          return selectedDepartment === department.departmentName;\r\n        }\r\n      );\r\n      GlobalAssetInformation.value.departmentID =\r\n        AssetLocation.value.selectedDepartment.shortName;\r\n    } else {\r\n      GlobalAssetInformation.value.departmentID = null;\r\n\r\n      sendSocketReq({\r\n        data: {\r\n          Expiry: 20000,\r\n          Type: \"REQUEST\",\r\n          Request: {\r\n            Module: \"MEMS\",\r\n            ServiceCode: \"BIOMD\",\r\n            API: \"FIND_RECORD\",\r\n            return_array: true,\r\n            max_list: 100,\r\n            find: {\r\n              collection: \"Department\",\r\n              queries: [\r\n                {\r\n                  field: \"facilityID\",\r\n                  op: \"sb\",\r\n                  value: GlobalAssetInformation.value.facilityID,\r\n                },\r\n              ],\r\n              projection: {\r\n                _id: 1,\r\n                facilityID: 1,\r\n                departmentName: 1,\r\n                shortName: 1,\r\n              },\r\n            },\r\n          },\r\n        },\r\n        callback: (res) => {\r\n          if (res.Type === \"RESPONSE\") {\r\n            // Console the Response Packet\r\n            console.log(\"Response Packet -->\", res.Response);\r\n            departmentList.value = res.Response.records;\r\n          } else if (res.Type === \"ERROR\") {\r\n            // Error response received during fetching\r\n            Type: \"ERROR\";\r\n            Response: {\r\n              Error_Code: \"API-CREATE_RECORD-E001\";\r\n              Error_Msg: \"CREATE_RECORD_API: Failed to execute query\";\r\n            }\r\n          }\r\n        },\r\n      });\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nonMounted(() => {\r\n  fetchFacility();\r\n});\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n@import \"../../BIOMD/Style/BIOMD.scss\";\r\n</style>\r\n","import script from \"./ASSET-AssetLocation.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./ASSET-AssetLocation.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./ASSET-AssetLocation.vue?vue&type=style&index=0&id=1a3795b0&lang=scss&scoped=true\"\n\nimport exportComponent from \"/mnt/e/Dev/GitProjects/MEMS/src/client/web/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-1a3795b0\"]])\n\nexport default __exports__","import script from \"./UI-Input.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./UI-Input.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","import script from \"./UI-Section.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./UI-Section.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./UI-Section.vue?vue&type=style&index=0&id=cfc2dae0&lang=scss&scoped=true\"\n\nimport exportComponent from \"/mnt/e/Dev/GitProjects/MEMS/src/client/web/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-cfc2dae0\"]])\n\nexport default __exports__"],"names":["store","useStore","sendSocketReq","request","dispatch","facilityList","ref","departmentList","AssetLocation","inject","GlobalAssetInformation","fetchFacility","async","selectedFacility","event","target","value","InputEvent","inputType","facilityID","data","Expiry","Type","Request","Module","ServiceCode","API","return_array","max_list","find","collection","queries","field","op","projection","_id","facilityName","callback","res","console","log","Response","records","facility","fetchDepartment","error","selectedDepartment","departmentID","departmentName","shortName","department","onMounted","__exports__"],"sourceRoot":""}